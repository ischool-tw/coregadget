// Generated by CoffeeScript 1.6.3
(function() {
  var Exam;

  jQuery(function() {
    gadget.onSizeChanged(function(size) {
      return $("#container-main").height(size.height - 47);
    });
    $("#ExamScore tbody").html("<tr><td>載入中...</td></tr>");
    $("#children-list").on("click", "a", function(evnet) {
      $('#children-list li[class=active]').removeClass('active');
      $(this).parent().addClass('active');
      Exam.onChangeStudent($(this).attr("children-index"));
      return $('.tooltip').remove();
    });
    return $("#Semester").on("click", ".btn", function(event) {
      var schoolYear, semester;
      schoolYear = $(this).attr("school-year");
      semester = $(this).attr("semester");
      $("#ExamScore").find('thead').html('').end().find('tbody').html("<tr><td>載入中...</td></tr>");
      $("#ScoreInterval tbody").html("<tr><td colspan=\"12\">載入中...</td></tr>");
      $("#ExamDropDown").find("ul").html("").end().find("a[data-toggle='dropdown']").html("");
      Exam.score(schoolYear, semester);
      return $(".tooltip").remove();
    });
  });

  Exam = (function() {
    var Comparer, FloatAdd, FloatDiv, FloatMath, FloatMul, getCurrSemester, getStudentInfo, getStudentRuleSeme, loadScore, myHandleArray, resetData, set_error_message, showScore, _connection, _curr_schoolyear, _curr_semester, _exam_score, _keys, _math_type, _places, _schoolYear, _semester, _student, _students, _system_exam_must_enddate, _system_position;
    _system_exam_must_enddate = gadget.params.system_exam_must_enddate || "true";
    _system_position = gadget.params.system_position || "student";
    _students = null;
    _student = null;
    _curr_schoolyear = null;
    _curr_semester = null;
    _exam_score = {};
    _places = null;
    _math_type = null;
    _keys = ["國文", "國語", "英文", "英語", "數學", "理化", "生物", "社會", "物理", "化學", "歷史", "地理", "公民"];
    _schoolYear = null;
    _semester = null;
    _connection = null;
    if (_system_position === "parent") {
      _connection = gadget.getContract("ischool.exam.parent");
    } else {
      _connection = gadget.getContract("ischool.exam.student");
    }
    getCurrSemester = function() {
      return _connection.send({
        service: "_.GetCurrentSemester",
        body: {},
        result: function(response, error, http) {
          if (error !== null) {
            return set_error_message("#mainMsg", "GetCurrentSemester", error);
          } else {
            if (response.Current) {
              _curr_schoolyear = response.Current.SchoolYear || "";
              return _curr_semester = response.Current.Semester || "";
            }
          }
        }
      });
    };
    getStudentInfo = function() {
      return _connection.send({
        service: "_.GetStudentInfo",
        body: {},
        result: function(response, error, http) {
          var items;
          if (error !== null) {
            return set_error_message('#mainMsg', 'GetStudentInfo', error);
          } else {
            items = [];
            if (response.Result && response.Result.Student) {
              _students = $(response.Result.Student);
              return _students.each(function(index, student) {
                items.push("<li " + (index === 0 ? 'class="active"' : void 0) + ">\n  <a href=\"#\" children-index=\"" + index + "\">" + student.StudentName + "</a>\n</li>");
                return $("#children-list").html(items.join("")).find('a:first').trigger('click');
              });
            }
          }
        }
      });
    };
    getStudentRuleSeme = function() {
      var request;
      request = {};
      if (_system_position === "parent") {
        request.Request = {
          Condition: {
            StudentID: _student.StudentID
          }
        };
      }
      return _connection.send({
        service: "_.GetScoreCalcRule",
        body: request,
        result: function(response, error, http) {
          var obj, _ref, _ref1, _ref2, _ref3;
          if (error !== null) {
            return set_error_message("#mainMsg", "GetScoreCalcRule", error);
          } else {
            if ((_ref = response.ScoreCalcRule) != null ? (_ref1 = _ref.Content) != null ? (_ref2 = _ref1.ScoreCalcRule) != null ? (_ref3 = _ref2["各項成績計算位數"]) != null ? _ref3["科目成績計算位數"] : void 0 : void 0 : void 0 : void 0) {
              obj = response.ScoreCalcRule.Content.ScoreCalcRule["各項成績計算位數"]["科目成績計算位數"];
              _places = obj["位數"] || 0;
              if (obj["四捨五入"] === "True") {
                _math_type = "round";
              }
              if (obj["無條件捨去"] === "True") {
                _math_type = "floor";
              }
              if (obj["無條件進位"] === "True") {
                _math_type = "ceil";
              }
            }
            return _connection.send({
              service: "_.GetAllCourseSemester",
              body: request,
              result: function(response, error, http) {
                var items, _ref4;
                if (error !== null) {
                  return set_error_message("#mainMsg", "GetAllCourseSemester", error);
                } else {
                  if (((_ref4 = response.Course) != null ? _ref4.Semester : void 0) != null) {
                    items = [];
                    $(response.Course.Semester).each(function(index, item) {
                      return items.push("<button class=\"btn btn-large\" school-year=\"" + this.SchoolYear + "\" semester=\"" + this.Semester + "\">\n  " + this.SchoolYear + this.Semester + "\n</button>");
                    });
                    return $("#Semester .btn-group").html(items.join("")).find(".btn:first").trigger("click");
                  } else {
                    return $("#ExamScore tbody").html("<tr><td>目前無資料</td></tr>");
                  }
                }
              }
            });
          }
        }
      });
    };
    resetData = function() {
      $("#ExamScore thead").html("");
      $("#ExamScore tbody").html("");
      $("#ScoreInterval tbody").html("");
      return $("#ExamDropDown").find("ul").html("").end().find("a[data-toggle='dropdown']").html("");
    };
    loadScore = function(schoolYear, semester) {
      var courseInterval, getAllStudentScoreReady, getCourseExamScoreReady, isCurrSemester, margeScore, request, request2;
      _schoolYear = schoolYear;
      _semester = semester;
      isCurrSemester = schoolYear === _curr_schoolyear && semester === _curr_semester;
      getCourseExamScoreReady = false;
      getAllStudentScoreReady = false;
      courseInterval = [];
      margeScore = function() {
        if (getCourseExamScoreReady && getAllStudentScoreReady) {
          $(courseInterval).each(function(index, item) {
            return $(_exam_score[schoolYear + semester]).each(function(index, course) {
              if (course.Subject === item.Subject) {
                item.ScoreDetail = [].concat(item.ScoreDetail);
                course.Exam = [].concat(course.Exam);
                $(item.ScoreDetail).each(function(index, scoreDetail) {
                  return $(course.Exam).each(function(index, exam) {
                    if (exam.ExamID === scoreDetail.ExamID) {
                      exam.Interval = scoreDetail;
                      return false;
                    }
                  });
                });
                return false;
              }
            });
          });
          if ($("#Semester button.active").attr("school-year") === schoolYear && $("#Semester button.active").attr("semester") === semester) {
            return showScore(_exam_score[schoolYear + semester], isCurrSemester);
          }
        }
      };
      if (_exam_score[schoolYear + semester]) {
        return showScore(_exam_score[schoolYear + semester], isCurrSemester);
      } else {
        request = {
          Content: {
            Condition: {
              SchoolYear: schoolYear,
              Semester: semester
            }
          }
        };
        request2 = {
          SchoolYear: schoolYear,
          Semester: semester
        };
        if (_system_position === "parent") {
          request.Content.Condition.StudentID = _student.StudentID;
          request2.StudentID = _student.StudentID;
        }
        _connection.send({
          service: "_.GetCourseExamScore",
          body: request,
          result: function(response, error, http) {
            var oCourse, oScore, _ref, _ref1;
            if (error !== null) {
              return set_error_message("#mainMsg", "GetCourseExamScore", error);
            } else {
              if ((_ref = response.ExamScoreList) != null ? (_ref1 = _ref.Seme) != null ? _ref1.Course : void 0 : void 0) {
                oCourse = myHandleArray(response.ExamScoreList.Seme.Course).sort(Comparer);
                oScore = _exam_score[schoolYear + semester] = oCourse;
              } else {
                _exam_score[schoolYear + semester] = null;
              }
              getCourseExamScoreReady = true;
              return margeScore();
            }
          }
        });
        return _connection.send({
          service: "_.GetAllStudentScore",
          body: request2,
          result: function(response, error, http) {
            var _ref;
            if (error !== null) {
              return set_error_message("#mainMsg", "GetAllStudentScore", error);
            } else {
              if ((_ref = response.ExamScoreList) != null ? _ref.Course : void 0) {
                courseInterval = [].concat(response.ExamScoreList.Course);
              }
              getAllStudentScoreReady = true;
              return margeScore();
            }
          }
        });
      }
    };
    showScore = function(exam_data, isCurrSemester) {
      var dropdownList, exam_list, exam_process, getIndex, getNow, interval_process, levelList, now, switchLevel, thead1, thead2;
      now = new Date();
      exam_list = [];
      thead1 = [];
      thead2 = [];
      dropdownList = [];
      levelList = ["Level0", "Level10", "Level20", "Level30", "Level40", "Level50", "Level60", "Level70", "Level80", "Level90", "Level100"];
      if (exam_data) {
        $(exam_data).each(function(index, course) {
          return $(course.Exam).each(function(index, exam) {
            if (exam.ExamID) {
              if ($.inArray(exam.ExamID, exam_list) === -1) {
                exam_list.push(exam.ExamID);
                thead1.push("<th colspan=\"2\">" + exam.ExamName + "</th>");
                thead2.push("<th colspan=\"2\">成績</th>");
                return dropdownList.push("<li><a href=\"#\" my-examid=\"" + exam.ExamID + "\">" + exam.ExamName + "</a></li>");
              }
            }
          });
        });
      }
      $("#ExamDropDown").find("ul").html(dropdownList.join("")).end().find("a[data-toggle='dropdown']").html("");
      $("#ExamDropDown .dropdown-menu a").click(function() {
        $("#ScoreInterval tbody").html("<tr><td colspan=\"12\">載入中...</td></tr>");
        $("#ExamDropDown a[data-toggle='dropdown']").html($(this).text()).attr('my-examid', $(this).attr('my-examid'));
        return interval_process();
      });
      getIndex = function(cid, exams) {
        var ret;
        ret = null;
        $(exams).each(function(index, item) {
          if (item.ExamID === cid) {
            return ret = item;
          }
        });
        return ret;
      };
      getNow = function(callBack) {
        return _connection.send({
          service: "_.GetNow",
          body: {},
          result: function(response, error, http) {
            if (error !== null) {
              return set_error_message("#mainMsg", "GetNow", error);
            } else {
              if (callBack && $.isFunction(callBack)) {
                return callBack(new Date(response.Now));
              }
            }
          }
        });
      };
      exam_process = function() {
        var tbody1, tbody_html, thead_html;
        thead_html = "";
        tbody1 = [];
        tbody_html = "";
        if (exam_data) {
          $(exam_data).each(function(index, course) {
            var pre_score;
            tbody1.push("<tr><th>" + course.Subject + "</th>");
            pre_score = -999;
            $(exam_list).each(function(key, value) {
              var avg_score, endtime, exam, ext_assignmentScore, ext_score, ext_text, extension, show_data, td_score, _ref;
              endtime = null;
              show_data = true;
              exam = getIndex(value, course.Exam);
              extension = null;
              ext_score = null;
              ext_text = null;
              ext_assignmentScore = null;
              avg_score = null;
              td_score = null;
              if (exam) {
                if (isCurrSemester) {
                  if (_system_exam_must_enddate === "true") {
                    if (((_ref = exam.ScoreDetail) != null ? _ref.EndTime : void 0) != null) {
                      if (new Date(exam.ScoreDetail.EndTime) >= now) {
                        show_data = false;
                      }
                      endtime = exam.ScoreDetail.EndTime;
                    }
                  }
                }
                if (exam.ScoreDetail && show_data) {
                  ext_score = exam.ScoreDetail.Score || "";
                  if (ext_score === "缺") {
                    avg_score = "";
                    td_score = "缺";
                  } else {
                    avg_score = parseInt(ext_score, 10);
                    td_score = ext_score ? Number(avg_score).toFixed(_places) : "";
                  }
                  if (avg_score && avg_score < 60) {
                    tbody1.push("<td class=\"my-fail\" my-data=\"" + exam.ExamID + "\">" + td_score + "</td>");
                  } else {
                    tbody1.push("<td my-data=\"" + exam.ExamID + "\">" + td_score + "</td>");
                  }
                  if (course.Subject === "體育" || pre_score === -999) {
                    tbody1.push("<td>&nbsp;</td>");
                  } else {
                    if (avg_score) {
                      if (avg_score > pre_score) {
                        tbody1.push("<td><span class=\"my-progress\">↑</span></td>");
                      } else if (avg_score < pre_score) {
                        tbody1.push("<td><span class=\"my-regress\">↓</span></td>");
                      } else {
                        tbody1.push("<td>&nbsp;</td>");
                      }
                    } else {
                      tbody1.push("<td>&nbsp;</td>");
                    }
                  }
                  if (avg_score) {
                    return pre_score = avg_score;
                  }
                } else if (show_data === false) {
                  return tbody1.push("<td colspan=\"2\" rel=\"tooltip\"\n  title=\"" + (endtime ? endtime + "後開放" : "尚未開放") + "\">\n  未開放</td>");
                } else {
                  return tbody1.push("<td></td><td></td>");
                }
              } else {
                return tbody1.push("<td></td><td></td>");
              }
            });
            return tbody1.push("</tr>");
          });
          thead_html = "<tr class=\"my-nofill\"><th rowspan=\"2\">科目名稱</th>" + (thead1.join("")) + "</tr>\n<tr class=\"my-nofill\">" + (thead2.join("")) + "</tr>";
          tbody_html = tbody1.join("");
          $("#ExamScore").find("thead").html(thead_html).end().find("tbody").html(tbody_html).end().find("td[rel='tooltip']").tooltip();
          return $("#ExamDropDown .dropdown-menu a:first").trigger("click");
        } else {
          $("#ExamScore").find("thead").html("").end().find("tbody").html("<tr><td>目前無資料</td></tr>");
          return $("#ScoreInterval tbody").html("<tr><td colspan=\"12\">目前無資料</td></tr>");
        }
      };
      switchLevel = function(score) {
        if (score >= 0 && score < 10) {
          return "Level0";
        } else if (score >= 10 && score < 20) {
          return "Level10";
        } else if (score >= 20 && score < 30) {
          return "Level20";
        } else if (score >= 30 && score < 40) {
          return "Level30";
        } else if (score >= 40 && score < 50) {
          return "Level40";
        } else if (score >= 50 && score < 60) {
          return "Level50";
        } else if (score >= 60 && score < 70) {
          return "Level60";
        } else if (score >= 70 && score < 80) {
          return "Level70";
        } else if (score >= 80 && score < 90) {
          return "Level80";
        } else if (score >= 90 && score <= 100) {
          return "Level90";
        } else {
          return "";
        }
      };
      interval_process = function() {
        var curr_examid, tbody1, tbody_html;
        tbody1 = [];
        tbody_html = "";
        curr_examid = $("#ExamDropDown a[data-toggle='dropdown']").attr('my-examid');
        if (exam_data && curr_examid) {
          $(exam_data).each(function(index, course) {
            tbody1.push("<tr><th>" + course.Subject + "</th>");
            $(exam_list).each(function(key, value) {
              var endtime, exam, ext_score, my_level, show_data, td_score, _ref, _ref1, _results;
              if (value === curr_examid) {
                endtime = null;
                show_data = true;
                exam = getIndex(value, course.Exam);
                ext_score = null;
                my_level = null;
                td_score = null;
                if ((exam != null ? exam.Interval : void 0) != null) {
                  if (isCurrSemester) {
                    if (_system_exam_must_enddate === "true") {
                      if (((_ref = exam.ScoreDetail) != null ? _ref.EndTime : void 0) != null) {
                        if (new Date(exam.ScoreDetail.EndTime) >= now) {
                          show_data = false;
                        }
                        endtime = exam.ScoreDetail.EndTime;
                      }
                    }
                  }
                  if (show_data) {
                    if (((_ref1 = exam.ScoreDetail) != null ? _ref1.Score : void 0) != null) {
                      ext_score = exam.ScoreDetail.Score || '';
                    }
                    if (ext_score && ext_score !== "缺") {
                      my_level = switchLevel(Number(ext_score));
                    }
                    _results = [];
                    for (key in levelList) {
                      if (levelList[key] === my_level) {
                        _results.push(tbody1.push("<td class=\"my-fail\">" + exam.Interval[levelList[key]] + "</td>"));
                      } else {
                        _results.push(tbody1.push("<td>" + exam.Interval[levelList[key]] + "</td>"));
                      }
                    }
                    return _results;
                  } else {
                    return tbody1.push("<td colspan=\"11\">\n  " + (endtime ? endtime + "後開放" : "尚未開放") + "\n</td>");
                  }
                } else {
                  return tbody1.push("<td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>");
                }
              }
            });
            return tbody1.push("</tr>");
          });
          tbody_html = tbody1.join("");
          return $("#ScoreInterval tbody").html(tbody_html);
        } else {
          return $("#ScoreInterval tbody").html("<tr><td colspan=\"12\">目前無資料</td></tr>");
        }
      };
      if (isCurrSemester && _system_exam_must_enddate === "true") {
        return getNow(function(d1) {
          now = d1;
          return exam_process();
        });
      } else {
        return exam_process();
      }
    };
    set_error_message = function(select_str, serviceName, error) {
      var tmp_msg;
      tmp_msg = "<i class=\"icon-white icon-info-sign my-err-info\"></i><strong>呼叫服務失敗</strong>(" + serviceName + ")";
      if (error !== null) {
        if (error.dsaError) {
          if (error.dsaError.status === "504") {
            switch (error.dsaError.message) {
              case "501":
                tmp_msg = "<strong>很抱歉，您無讀取資料權限！</strong>";
            }
          } else {
            if (error.dsaError.message) {
              tmp_msg = error.dsaError.message;
            }
          }
        } else if (error.loginError.message) {
          tmp_msg = error.loginError.message;
        } else {
          if (error.message) {
            tmp_msg = error.message;
          }
        }
        $(select_str).html("<div class=\"alert alert-error\"><button class=\"close\" data-dismiss=\"alert\">×</button>" + tmp_msg + "</div>");
        return $(".my-err-info").click(function() {
          return alert("請拍下此圖，並與客服人員連絡，謝謝您。\n" + JSON.stringify(error, null, 2));
        });
      }
    };
    FloatAdd = function(arg1, arg2) {
      var e, m, r1, r2;
      r1 = null;
      r2 = null;
      m = null;
      try {
        r1 = arg1.toString().split(".")[1].length;
      } catch (_error) {
        e = _error;
        r1 = 0;
      }
      try {
        r2 = arg2.toString().split(".")[1].length;
      } catch (_error) {
        e = _error;
        r2 = 0;
      }
      m = Math.pow(10, Math.max(r1, r2));
      return (FloatMul(arg1, m) + FloatMul(arg2, m)) / m;
    };
    FloatDiv = function(arg1, arg2) {
      var r1, r2, t1, t2;
      t1 = 0;
      t2 = 0;
      r1 = null;
      r2 = null;
      try {
        t1 = arg1.toString().split(".")[1].length;
      } catch (_error) {}
      try {
        t2 = arg2.toString().split(".")[1].length;
      } catch (_error) {}
      r1 = Number(arg1.toString().replace(".", ""));
      r2 = Number(arg2.toString().replace(".", ""));
      return (r1 / r2) * Math.pow(10, t2 - t1);
    };
    FloatMul = function(arg1, arg2) {
      var m, s1, s2;
      m = 0;
      s1 = arg1.toString();
      s2 = arg2.toString();
      try {
        m += s1.split(".")[1].length;
      } catch (_error) {}
      try {
        m += s2.split(".")[1].length;
      } catch (_error) {}
      return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m);
    };
    FloatMath = function(arg1, type, places) {
      places = places || 0;
      switch (type) {
        case "ceil":
          return (Math.ceil(arg1 * Math.pow(10, places))) / Math.pow(10, places);
        case "floor":
          return (Math.floor(arg1 * Math.pow(10, places))) / Math.pow(10, places);
        case "round":
          return (Math.round(arg1 * Math.pow(10, places))) / Math.pow(10, places);
        default:
          return arg1;
      }
    };
    Comparer = function(s1, s2) {
      var ComparerWithKeys;
      ComparerWithKeys = null;
      ComparerWithKeys = function(s1, s2) {
        var b1, b2, i, index, key, maxLength;
        b1 = null;
        b2 = null;
        i = null;
        index = null;
        key = null;
        maxLength = null;
        if (s1 === s2) {
          return 0;
        }
        if (s1.length === 0) {
          return 1;
        }
        if (s2.length === 0) {
          return -1;
        }
        maxLength = (s1.length > s2.length ? s2.length : s1.length);
        i = 0;
        while (i < maxLength) {
          for (index in _keys) {
            b1 = false;
            b2 = false;
            key = _keys[index];
            b1 = (s1.indexOf(key) === 0 ? true : false);
            b2 = (s2.indexOf(key) === 0 ? true : false);
            if (b1 && !b2) {
              return -1;
            }
            if (b2 && !b1) {
              return 1;
            }
          }
          if (s1.substring(0, 1) === s2.substring(0, 1)) {
            s1 = s1.substring(1, s1.length);
            s2 = s2.substring(1, s2.length);
          } else {
            return (s1.substring(0, 1) < s2.substring(0, 1) ? -1 : 1);
          }
          i++;
        }
        if (s1 === s2) {
          return 0;
        }
        if (!s1) {
          return -1;
        }
        if (!s2) {
          return 1;
        }
        return ComparerWithKeys(s1, s2);
      };
      return ComparerWithKeys(s1.Subject, s2.Subject);
    };
    myHandleArray = function(obj) {
      var result;
      result = null;
      result = null;
      if (!$.isArray(obj)) {
        result = [];
        if (obj) {
          result.push(obj);
        }
      } else {
        result = obj;
      }
      return result;
    };
    getCurrSemester();
    if (_system_position === "parent") {
      getStudentInfo();
    } else {
      getStudentRuleSeme();
    }
    return {
      'score': function(schoolYear, semester) {
        return loadScore(schoolYear, semester);
      },
      'onChangeStudent': function(index) {
        resetData();
        _student = _students[index];
        return getStudentRuleSeme();
      }
    };
  })();

}).call(this);
