// Generated by CoffeeScript 1.6.3
(function() {
  var Exam;

  jQuery(function() {
    gadget.onSizeChanged(function(size) {
      return $("#container-main").height(size.height - 47);
    });
    Exam.removeInterval();
    $("#ExamScore tbody").html("<tr><td>載入中...</td></tr>");
    $("input:radio[name='show_model'][value='" + (gadget.params.system_show_model || "subject") + "']").prop('checked', true);
    $("#children-list").on("click", "a", function(evnet) {
      $('#children-list li[class=active]').removeClass('active');
      $(this).parent().addClass('active');
      Exam.onChangeStudent($(this).attr("children-index"));
      return $('.tooltip').remove();
    });
    $("#Semester").on("click", ".btn", function(event) {
      var schoolYear, semester;
      schoolYear = $(this).attr("school-year");
      semester = $(this).attr("semester");
      $(".tooltip").remove();
      $("#ExamScore").find('thead').html('').end().find('tbody').html("<tr><td>載入中...</td></tr>");
      $("#ScoreInterval tbody").html("<tr><td colspan=\"13\">載入中...</td></tr>");
      $("#ExamDropDown").find("ul").html("").end().find("a[data-toggle='dropdown']").html("");
      return Exam.score(schoolYear, semester);
    });
    return $("body").on("click", "input:radio[name='show_model']", function() {
      return Exam.setModel($(this).val());
    });
  });

  Exam = (function() {
    var Comparer, FloatFormat, FloatMath, avgScore, getCurrSemester, getStudentInfo, getStudentRuleSeme, interval_process, loadScore, myHandleArray, resetData, set_error_message, showInterval, showScore, switchLevel, _connection, _curr_schoolyear, _curr_semester, _exam_score, _keys, _math_type, _now, _places, _schoolYear, _semester, _student, _students, _system_exam_must_enddate, _system_fix_must_enddate, _system_position, _system_show_model, _system_type;
    _system_type = gadget.params.system_type || "kh";
    _system_exam_must_enddate = gadget.params.system_exam_must_enddate || "true";
    _system_fix_must_enddate = gadget.params.system_fix_must_enddate || "true";
    _system_show_model = gadget.params.system_show_model || "subject";
    _system_position = gadget.params.system_position || "student";
    _students = null;
    _student = null;
    _curr_schoolyear = null;
    _curr_semester = null;
    _exam_score = {};
    _places = null;
    _math_type = null;
    _keys = ["國語文:國文", "國語文", "英語:英文", "英語", "語文:國文", "語文:英文", "語文", "數學", "社會:歷史", "社會:地理", "社會:公民", "社會", "自然與生活科技:理化", "自然與生活科技:生物", "自然與生活科技:物理", "自然與生活科技:化學", "自然與生活科技", "健康與體育", "藝術與人文", "綜合活動", "彈性課程"];
    _schoolYear = null;
    _semester = null;
    _connection = null;
    _now = null;
    if (_system_position === "parent") {
      _connection = gadget.getContract("ischool.exam.parent");
    } else {
      _connection = gadget.getContract("ischool.exam.student");
      _student = {
        StudentID: 0
      };
    }
    getCurrSemester = function() {
      return _connection.send({
        service: "_.GetCurrentSemester",
        body: {},
        result: function(response, error, http) {
          if (error !== null) {
            set_error_message("#mainMsg", "GetCurrentSemester", error);
          } else {
            if (response.Current) {
              _curr_schoolyear = response.Current.SchoolYear || "";
              _curr_semester = response.Current.Semester || "";
            }
          }
          return _connection.send({
            service: "_.GetNow",
            body: {},
            result: function(response, error, http) {
              if (error !== null) {
                return set_error_message("#mainMsg", "GetNow", error);
              } else {
                _now = new Date(response.Now);
                return getStudentInfo();
              }
            }
          });
        }
      });
    };
    getStudentInfo = function() {
      if (_system_position === "student") {
        _exam_score[0] = [];
        return getStudentRuleSeme();
      } else if (_system_position === "parent") {
        return _connection.send({
          service: "_.GetStudentInfo",
          body: {},
          result: function(response, error, http) {
            var items;
            if (error !== null) {
              return set_error_message('#mainMsg', 'GetStudentInfo', error);
            } else {
              items = [];
              if (response.Result && response.Result.Student) {
                _students = $(response.Result.Student);
                _students.each(function(index, student) {
                  items.push("<li " + (index === 0 ? 'class="active"' : void 0) + ">\n  <a href=\"#\" children-index=\"" + index + "\">" + student.StudentName + "</a>\n</li>");
                  return _exam_score[student.StudentID] = [];
                });
                return $("#children-list").html(items.join("")).find('a:first').trigger('click');
              }
            }
          }
        });
      }
    };
    getStudentRuleSeme = function() {
      var request;
      request = {};
      if (_system_position === "parent") {
        request.Request = {
          Condition: {
            StudentID: _student.StudentID
          }
        };
      }
      return _connection.send({
        service: "_.GetScoreCalcRule",
        body: request,
        result: function(response, error, http) {
          var obj, _ref, _ref1, _ref2, _ref3, _ref4;
          if (error !== null) {
            return set_error_message("#mainMsg", "GetScoreCalcRule", error);
          } else {
            if (((_ref = response.ScoreCalcRule) != null ? (_ref1 = _ref.Content) != null ? (_ref2 = _ref1.ScoreCalcRule) != null ? (_ref3 = _ref2['成績計算規則']) != null ? (_ref4 = _ref3['各項成績計算位數']) != null ? _ref4['科目成績計算'] : void 0 : void 0 : void 0 : void 0 : void 0) != null) {
              obj = response.ScoreCalcRule.Content.ScoreCalcRule["成績計算規則"]["各項成績計算位數"]["科目成績計算"];
              _places = obj["位數"] || 0;
              switch (obj["進位方式"]) {
                case "無條件進位":
                  _math_type = "ceil";
                  break;
                case "無條件捨去":
                  _math_type = "floor";
                  break;
                case "四捨五入":
                  _math_type = "round";
              }
            }
            return _connection.send({
              service: "_.GetAllCourseSemester",
              body: request,
              result: function(response, error, http) {
                var items, _ref5;
                if (error !== null) {
                  return set_error_message("#mainMsg", "GetAllCourseSemester", error);
                } else {
                  if (((_ref5 = response.Course) != null ? _ref5.Semester : void 0) != null) {
                    items = [];
                    $(response.Course.Semester).each(function(index, item) {
                      return items.push("<button class=\"btn btn-large\" school-year=\"" + this.SchoolYear + "\" semester=\"" + this.Semester + "\">\n  " + this.SchoolYear + this.Semester + "\n</button>");
                    });
                    $("#Semester .btn-group").html(items.join(""));
                    if ($("#Semester .btn-group button[school-year=" + _schoolYear + "][semester=" + _semester + "]").length > 0) {
                      return $("#Semester .btn-group button[school-year=" + _schoolYear + "][semester=" + _semester + "]").trigger("click");
                    } else {
                      return $("#Semester .btn-group button:first").trigger("click");
                    }
                  } else {
                    return $("#ExamScore tbody").html("<tr><td>目前無資料</td></tr>");
                  }
                }
              }
            });
          }
        }
      });
    };
    resetData = function() {
      $("#ExamScore thead").html("");
      $("#ExamScore tbody").html("");
      $("#ScoreInterval tbody").html("");
      return $("#ExamDropDown").find("ul").html("").end().find("a[data-toggle='dropdown']").html("");
    };
    loadScore = function(schoolYear, semester) {
      var courseInterval, fixInterval, getAllStudentScoreReady, getCourseExamScoreReady, isCurrSemester, margeScore, request, request2;
      _schoolYear = schoolYear;
      _semester = semester;
      isCurrSemester = schoolYear === _curr_schoolyear && semester === _curr_semester;
      getCourseExamScoreReady = false;
      getAllStudentScoreReady = false;
      courseInterval = [];
      fixInterval = [];
      margeScore = function() {
        if (getCourseExamScoreReady && getAllStudentScoreReady) {
          if (_system_type === "hc") {
            $(courseInterval).each(function(index, item) {
              if (_exam_score[_student.StudentID][schoolYear + semester] && _exam_score[_student.StudentID][schoolYear + semester].Course) {
                return $(_exam_score[_student.StudentID][schoolYear + semester].Course).each(function(index, course) {
                  if (course.Subject === item.Subject) {
                    item.ScoreDetail = [].concat(item.ScoreDetail);
                    return $(item.ScoreDetail).each(function(index, scoreDetail) {
                      if (course.Exams[scoreDetail.ExamID]) {
                        return course.Exams[scoreDetail.ExamID].Interval = scoreDetail;
                      }
                    });
                  }
                });
              }
            });
            $(fixInterval).each(function(index, item) {
              if (_exam_score[_student.StudentID][schoolYear + semester] && _exam_score[_student.StudentID][schoolYear + semester].Course) {
                return $(_exam_score[_student.StudentID][schoolYear + semester].Course).each(function(index, course) {
                  if (course.Subject === item.Subject) {
                    return course.Interval = item;
                  }
                });
              }
            });
          }
          if ($("#Semester button.active").attr("school-year") === schoolYear && $("#Semester button.active").attr("semester") === semester) {
            showScore(_exam_score[_student.StudentID][schoolYear + semester], isCurrSemester);
            return showInterval(_exam_score[_student.StudentID][schoolYear + semester], isCurrSemester);
          }
        }
      };
      if (_exam_score[_student.StudentID][schoolYear + semester]) {
        showScore(_exam_score[_student.StudentID][schoolYear + semester], isCurrSemester);
        if (_system_type === "hc") {
          return showInterval(_exam_score[_student.StudentID][schoolYear + semester], isCurrSemester);
        }
      } else {
        request = {
          Content: {
            Condition: {
              SchoolYear: schoolYear,
              Semester: semester
            }
          }
        };
        request2 = {
          SchoolYear: schoolYear,
          Semester: semester
        };
        if (_system_position === "parent") {
          request.Content.Condition.StudentID = _student.StudentID;
          request2.StudentID = _student.StudentID;
        }
        _connection.send({
          service: "_.GetJHCourseExamScore",
          body: request,
          result: function(response, error, http) {
            var aCourse, aDomain, aExamList, aFixExam, oCourse, _ref, _ref1;
            if (error !== null) {
              return set_error_message("#mainMsg", "GetJHCourseExamScore", error);
            } else {
              if (((_ref = response.ExamScoreList) != null ? (_ref1 = _ref.Seme) != null ? _ref1.Course : void 0 : void 0) != null) {
                oCourse = myHandleArray(response.ExamScoreList.Seme.Course);
                _exam_score[_student.StudentID][schoolYear + semester] = {
                  Domain: {},
                  Course: [],
                  ExamList: [],
                  FixExam: {
                    AvgTFScore: null,
                    TotalTFCredit: 0,
                    TotalTFScore: 0
                  }
                };
                aDomain = _exam_score[_student.StudentID][schoolYear + semester].Domain;
                aCourse = _exam_score[_student.StudentID][schoolYear + semester].Course;
                aExamList = _exam_score[_student.StudentID][schoolYear + semester].ExamList;
                aFixExam = _exam_score[_student.StudentID][schoolYear + semester].FixExam;
                $(oCourse).each(function(index, course) {
                  var credit, exams, fix_score, _ref2, _ref3, _ref4, _ref5;
                  credit = null;
                  fix_score = null;
                  course.Domain = course.Domain || '彈性課程';
                  if (course.Credit) {
                    credit = Number(course.Credit);
                  }
                  if ((((_ref2 = course.FixExtension) != null ? (_ref3 = _ref2.Extension) != null ? _ref3.OrdinarilyScore : void 0 : void 0) != null) && course.FixExtension.Extension.OrdinarilyScore) {
                    fix_score = Number(course.FixExtension.Extension.OrdinarilyScore);
                  }
                  if (!aDomain["domain:" + course.Domain]) {
                    aDomain["domain:" + course.Domain] = {
                      'Domain': course.Domain,
                      'CourseCount': 0,
                      'TotalFCredit': 0,
                      'TotalFScore': 0,
                      'AvgFScore': null,
                      'Flag': null,
                      'Exams': {}
                    };
                  }
                  aDomain["domain:" + course.Domain].CourseCount += 1;
                  exams = [];
                  if (course.Exam != null) {
                    $(course.Exam).each(function(index, exam) {
                      var avg_score, ext_assignmentScore, ext_score, weight_score1, weight_score2, _ref4, _ref5, _ref6, _ref7, _ref8;
                      ext_score = null;
                      ext_assignmentScore = null;
                      avg_score = null;
                      if (((_ref4 = course.FixTime) != null ? (_ref5 = _ref4.Extension) != null ? _ref5.ScorePercentage : void 0 : void 0) != null) {
                        weight_score1 = course.FixTime.Extension.ScorePercentage || 50;
                      }
                      weight_score2 = 100 - (1 * weight_score1);
                      if (exam.ExamID) {
                        if (((_ref6 = exam.ScoreDetail) != null ? (_ref7 = _ref6.Extension) != null ? _ref7.Extension : void 0 : void 0) != null) {
                          $(exam.ScoreDetail.Extension.Extension).each(function(index, extension) {
                            if (extension.Score) {
                              ext_score = Number(extension.Score);
                            }
                            if (extension.AssignmentScore) {
                              ext_assignmentScore = Number(extension.AssignmentScore);
                            }
                            if ((ext_score != null) && (ext_assignmentScore != null)) {
                              return avg_score = FloatMath(FloatMath(FloatMath(ext_score, '*', weight_score1), '+', FloatMath(ext_assignmentScore, '*', weight_score2)), '/', 100);
                            } else if (ext_score != null) {
                              return avg_score = ext_score;
                            } else {
                              return avg_score = ext_assignmentScore;
                            }
                          });
                        }
                        exams[exam.ExamID] = {
                          ExamID: exam.ExamID,
                          ExamName: exam.ExamName,
                          EndTime: ((_ref8 = exam.ScoreDetail) != null ? _ref8.EndTime : void 0) != null ? exam.ScoreDetail.EndTime : void 0,
                          Score1: ext_score,
                          Score2: ext_assignmentScore,
                          Avg: avg_score,
                          CreditScore: (avg_score != null) && credit ? FloatMath(avg_score, '*', credit) : void 0,
                          Flag: null
                        };
                        if (!aDomain["domain:" + course.Domain].Exams[exam.ExamID]) {
                          aDomain["domain:" + course.Domain].Exams[exam.ExamID] = {
                            'TotalCredit': 0,
                            'TotalCScore': 0,
                            'AvgCScore': null,
                            'Flag': null
                          };
                        }
                        if (!aExamList['exam:' + exam.ExamID]) {
                          aExamList['exam:' + exam.ExamID] = {
                            ExamID: exam.ExamID,
                            ExamName: exam.ExamName,
                            ExamDisplayOrder: exam.ExamDisplayOrder,
                            TotalECredit: 0,
                            TotalEScore: 0,
                            AvgEScore: null,
                            Flag: null
                          };
                          return aExamList.push(aExamList['exam:' + exam.ExamID]);
                        }
                      }
                    });
                  }
                  aCourse[course.Domain + ":" + course.Subject] = {
                    CourseID: course.CourseID,
                    Index: course.Domain + ":" + course.Subject,
                    Domain: course.Domain,
                    Subject: course.Subject,
                    Credit: credit,
                    FixEndTime: ((_ref4 = course.FixTime) != null ? (_ref5 = _ref4.Extension) != null ? _ref5.OrdinarilyEndTime : void 0 : void 0) != null ? course.FixTime.Extension.OrdinarilyEndTime : void 0,
                    FixScore: fix_score,
                    Exams: exams
                  };
                  return aCourse.push(aCourse[course.Domain + ":" + course.Subject]);
                });
                aCourse.sort(Comparer);
                aExamList.sort(function(a, b) {
                  return parseInt(a.ExamDisplayOrder, 10) > parseInt(b.ExamDisplayOrder, 10);
                });
                avgScore(_exam_score[_student.StudentID][schoolYear + semester], isCurrSemester);
              } else {
                _exam_score[_student.StudentID][schoolYear + semester] = null;
              }
              getCourseExamScoreReady = true;
              return margeScore();
            }
          }
        });
        return _connection.send({
          service: "_.GetJHAllStudentScore",
          body: request2,
          result: function(response, error, http) {
            var _ref;
            if (error !== null) {
              return set_error_message("#mainMsg", "GetJHAllStudentScore", error);
            } else {
              if ((_ref = response.ExamScoreList) != null ? _ref.Course : void 0) {
                courseInterval = [].concat(response.ExamScoreList.Course);
                fixInterval = [].concat(response.FixScoreList.Course);
              }
              getAllStudentScoreReady = true;
              return margeScore();
            }
          }
        });
      }
    };
    avgScore = function(exam_data, isCurrSemester) {
      var exam_process;
      exam_process = function() {
        var domain, domainName, exam, ii, key, pre_score, _ref, _ref1, _ref2;
        $(exam_data.Course).each(function(key, course) {
          var exam, ii, pre_score, _ref, _results;
          pre_score = -1;
          ii = 0;
          _ref = course.Exams;
          _results = [];
          for (key in _ref) {
            exam = _ref[key];
            ii += 1;
            if ((exam.Avg != null) && course.Subjec !== '體育') {
              if (ii !== 1 && exam.Avg !== '未開放') {
                if (exam.Avg > pre_score) {
                  exam.Flag = 'up';
                } else if (exam.Avg < pre_score) {
                  exam.Flag = 'down';
                }
              }
              _results.push(pre_score = exam.Avg);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
        $(exam_data.Course).each(function(key, course) {
          var credit, exam, _ref, _results;
          credit = course.Credit;
          _ref = course.Exams;
          _results = [];
          for (key in _ref) {
            exam = _ref[key];
            if ((exam.Avg != null) && exam.Avg !== '未開放' && credit && course.Domain !== '彈性課程') {
              exam_data.Domain["domain:" + course.Domain].Exams[exam.ExamID].TotalCredit = FloatMath(credit, '+', exam_data.Domain["domain:" + course.Domain].Exams[exam.ExamID].TotalCredit);
              exam_data.Domain["domain:" + course.Domain].Exams[exam.ExamID].TotalCScore = FloatMath(FloatMath(exam.Avg, '*', credit), '+', exam_data.Domain["domain:" + course.Domain].Exams[exam.ExamID].TotalCScore);
              exam_data.ExamList['exam:' + exam.ExamID].TotalECredit = FloatMath(credit, '+', exam_data.ExamList['exam:' + exam.ExamID].TotalECredit);
              _results.push(exam_data.ExamList['exam:' + exam.ExamID].TotalEScore = FloatMath(FloatMath(exam.Avg, '*', credit), '+', exam_data.ExamList['exam:' + exam.ExamID].TotalEScore));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
        _ref = exam_data.Domain;
        for (key in _ref) {
          domain = _ref[key];
          ii = 0;
          domainName = domain.DomainName;
          _ref1 = domain.Exams;
          for (key in _ref1) {
            exam = _ref1[key];
            ii += 1;
            if (exam.TotalCredit > 0) {
              exam.AvgCScore = FloatFormat(FloatMath(exam.TotalCScore, '/', exam.TotalCredit), _math_type, _places);
              if (ii !== 1) {
                if (exam.AvgCScore > pre_score) {
                  exam.Flag = 'up';
                } else if (exam.AvgCScore < pre_score) {
                  exam.Flag = 'down';
                }
              }
              pre_score = exam.AvgCScore;
            }
          }
        }
        ii = 0;
        $(exam_data.ExamList).each(function(key, exam) {
          if (exam.TotalECredit > 0) {
            exam.AvgEScore = FloatFormat(FloatMath(exam.TotalEScore, '/', exam.TotalECredit), _math_type, _places);
            ii += 1;
            if (ii !== 1) {
              if (exam.AvgEScore > pre_score) {
                exam.Flag = 'up';
              } else if (exam.AvgEScore < pre_score) {
                exam.Flag = 'down';
              }
            }
            return pre_score = exam.AvgEScore;
          }
        });
        $(exam_data.Course).each(function(key, course) {
          var credit, fix_score;
          credit = course.Credit;
          fix_score = course.FixScore;
          if ((course.FixScore != null) && course.FixScore !== '未開放' && credit && course.Domain !== '彈性課程') {
            exam_data.Domain["domain:" + course.Domain].TotalFCredit = FloatMath(credit, '+', exam_data.Domain["domain:" + course.Domain].TotalFCredit);
            exam_data.Domain["domain:" + course.Domain].TotalFScore = FloatMath(FloatMath(fix_score, '*', credit), '+', exam_data.Domain["domain:" + course.Domain].TotalFScore);
            exam_data.FixExam.TotalTFCredit = FloatMath(credit, '+', exam_data.FixExam.TotalTFCredit);
            return exam_data.FixExam.TotalTFScore = FloatMath(FloatMath(fix_score, '*', credit), '+', exam_data.FixExam.TotalTFScore);
          }
        });
        ii = 0;
        _ref2 = exam_data.Domain;
        for (key in _ref2) {
          domain = _ref2[key];
          if (domain.TotalFCredit > 0) {
            domain.AvgFScore = FloatFormat(FloatMath(domain.TotalFScore, '/', domain.TotalFCredit), _math_type, _places);
            pre_score = domain.AvgFScore;
          }
        }
        if (exam_data.FixExam.TotalTFCredit) {
          return exam_data.FixExam.AvgTFScore = FloatFormat(FloatMath(exam_data.FixExam.TotalTFScore, '/', exam_data.FixExam.TotalTFCredit), _math_type, _places);
        }
      };
      if (isCurrSemester && (_system_exam_must_enddate === "true" || _system_fix_must_enddate === "true")) {
        if (_system_exam_must_enddate === "true") {
          $(exam_data.Course).each(function(key, course) {
            var domainName, exam, _ref, _results;
            domainName = course.Domain;
            _ref = course.Exams;
            _results = [];
            for (key in _ref) {
              exam = _ref[key];
              if (exam.EndTime) {
                if (new Date(exam.EndTime) >= _now) {
                  _results.push(exam.Avg = '未開放');
                } else {
                  _results.push(void 0);
                }
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
        }
        if (_system_fix_must_enddate === "true") {
          $(exam_data.Course).each(function(key, course) {
            if (course.FixEndTime) {
              if (new Date(course.FixEndTime) >= _now) {
                return course.FixScore = '未開放';
              }
            }
          });
          return exam_process();
        }
      } else {
        return exam_process();
      }
    };
    showScore = function(exam_data, isCurrSemester) {
      var pre_domain, tbody1, tbody_html, thead1, thead2, thead_html;
      thead1 = [];
      thead2 = [];
      thead_html = "";
      tbody1 = [];
      tbody_html = "";
      pre_domain = null;
      if (exam_data) {
        $(exam_data.ExamList).each(function(key, exam) {
          thead1.push("<th colspan=\"2\" class=\"my-examname-thead\">" + exam.ExamName + "</th>");
          if (_system_type === "hc" && _system_show_model === "subject") {
            return thead2.push("<th colspan=\"2\" class=\"my-subject-thead\">總成績(定期/平時)</th>");
          } else {
            return thead2.push("<th colspan=\"2\">成績</th>");
          }
        });
        switch (_system_type) {
          case "kh":
            thead_html = "<tr class=\"my-nofill\">\n  <th rowspan=\"2\">領域名稱</th>\n  <th rowspan=\"2\">科目名稱</th>\n  <th rowspan=\"2\">權數</th>\n  " + (thead1.join("")) + "\n  <th class=\"my-fix-thead\">平時評量</th>\n</tr>\n<tr class=\"my-nofill\">" + (thead2.join("")) + "<th>成績</th></tr>";
            break;
          default:
            thead_html = "<tr class=\"my-nofill\">\n  <th rowspan=\"2\">領域名稱</th>\n  <th rowspan=\"2\">科目名稱</th>\n  <th rowspan=\"2\">權數</th>\n  " + (thead1.join("")) + "\n</tr>\n<tr class=\"my-nofill\">" + (thead2.join("")) + "</tr>";
        }
        $(exam_data.Course).each(function(key, course) {
          var domain;
          domain = exam_data.Domain['domain:' + course.Domain];
          tbody1.push("<tr>");
          if (course.Domain !== pre_domain) {
            tbody1.push("<th rowspan=\"" + domain.CourseCount + "\">" + course.Domain + "</th>");
          }
          if (course.Domain === '彈性課程') {
            tbody1.push("<th colspan=\"2\">" + course.Subject + "</th>");
          } else {
            tbody1.push("<th>" + course.Subject + "</th>\n<th>" + course.Credit + "</th>");
          }
          $(exam_data.ExamList).each(function(key, item) {
            var exam, td_score, _ref;
            exam = course.Exams[item.ExamID];
            td_score = null;
            if (exam) {
              switch (_system_type) {
                case "kh":
                  td_score = exam.Avg != null ? exam.Avg : '';
                  break;
                case "hc":
                  if ((exam.Score1 != null) && (exam.Score2 != null)) {
                    td_score = "<span class=\"my-avg-score\"> " + (Number(exam.Avg).toFixed(_places)) + " </span>( " + exam.Score1 + " / " + exam.Score2 + " )";
                  } else if (exam.Score1 != null) {
                    td_score = exam.Score1;
                  } else if (exam.Score2 != null) {
                    td_score = exam.Score2;
                  } else {
                    td_score = '';
                  }
              }
              if (_system_show_model === "domain" && course.Domain !== pre_domain) {
                if (((_ref = domain.Exams[exam.ExamID]) != null ? _ref.AvgCScore : void 0) != null) {
                  td_score = Number(domain.Exams[exam.ExamID].AvgCScore).toFixed(_places);
                  if (domain.Exams[exam.ExamID].AvgCScore < 60) {
                    tbody1.push("<td class=\"my-fail\" rowspan=\"" + domain.CourseCount + "\">" + td_score + "</td>");
                  } else {
                    tbody1.push("<td rowspan=\"" + domain.CourseCount + "\">" + td_score + "</td>");
                  }
                } else {
                  tbody1.push("<td rowspan=\"" + domain.CourseCount + "\"></td>");
                }
                if (domain.Exams[exam.ExamID].Flag === "up") {
                  return tbody1.push("<td class=\"my-effect\" rowspan=\"" + domain.CourseCount + "\"><span class=\"my-progress\">↑</span></td>");
                } else if (domain.Exams[exam.ExamID].Flag === "down") {
                  return tbody1.push("<td class=\"my-effect\" rowspan=\"" + domain.CourseCount + "\"><span class=\"my-regress\">↓</span></td>");
                } else {
                  return tbody1.push("<td class=\"my-effect\" rowspan=\"" + domain.CourseCount + "\">&nbsp;</td>");
                }
              } else if (_system_show_model === "subject") {
                if (exam.Avg !== '未開放') {
                  if ((exam.Avg != null) && exam.Avg < 60) {
                    tbody1.push("<td class=\"my-fail\" my-data=\"" + exam.ExamID + "\">" + td_score + "</td>");
                  } else {
                    tbody1.push("<td my-data=\"" + exam.ExamID + "\">" + td_score + "</td>");
                  }
                  if (exam.Flag === "up") {
                    return tbody1.push("<td class=\"my-effect\"><span class=\"my-progress\">↑</span></td>");
                  } else if (exam.Flag === "down") {
                    return tbody1.push("<td class=\"my-effect\"><span class=\"my-regress\">↓</span></td>");
                  } else {
                    return tbody1.push("<td class=\"my-effect\">&nbsp;</td>");
                  }
                } else {
                  return tbody1.push("<td rel=\"tooltip\"\n  title=\"" + (exam.EndTime ? exam.EndTime.toString() + "後開放" : "尚未開放") + "\">\n  未開放</td>\n<td class=\"my-effect\">&nbsp;</td>");
                }
              }
            } else {
              if (_system_show_model === "subject") {
                return tbody1.push("<td>&nbsp;</td><td>&nbsp;</td>");
              } else if (_system_show_model === "domain" && course.Domain !== pre_domain) {
                return tbody1.push("<td rowspan=\"" + domain.CourseCount + "\"></td>\n<td class=\"my-effect\" rowspan=\"" + domain.CourseCount + "\">&nbsp;</td>");
              }
            }
          });
          if (_system_type === "kh") {
            if (_system_show_model === "subject" && course.FixScore === '未開放') {
              tbody1.push("<td my-data=\"Ordinarily\" rel=\"tooltip\"\ntitle=\"" + (course.FixEndTime ? course.FixEndTime.toString() + "後開放" : "尚未開放") + "\">\n未開放</td>");
            } else {
              if (_system_show_model === "domain") {
                if (course.Domain !== pre_domain) {
                  if (domain.AvgFScore != null) {
                    if (domain.AvgFScore < 60) {
                      tbody1.push("<td rowspan=\"" + domain.CourseCount + "\" class=\"my-fail\" my-data=\"Ordinarily\">" + (Number(domain.AvgFScore).toFixed(_places)) + "</td>");
                    } else {
                      tbody1.push("<td rowspan=\"" + domain.CourseCount + "\" my-data=\"Ordinarily\">" + (Number(domain.AvgFScore).toFixed(_places)) + "</td>");
                    }
                  } else {
                    tbody1.push("<td rowspan=\"" + domain.CourseCount + "\" my-data=\"Ordinarily\"></td>");
                  }
                }
              } else if (_system_show_model === "subject") {
                if (course.FixScore != null) {
                  if (course.FixScore < 60) {
                    tbody1.push("<td class=\"my-fail\" my-data=\"Ordinarily\">" + course.FixScore + "</td>");
                  } else {
                    tbody1.push("<td my-data=\"Ordinarily\">" + course.FixScore + "</td>");
                  }
                } else {
                  tbody1.push("<td my-data=\"Ordinarily\"></td>");
                }
              }
            }
          }
          tbody1.push("</tr>");
          return pre_domain = course.Domain;
        });
        tbody1.push("<tr><th colspan=\"3\">加權平均</th>");
        $(exam_data.ExamList).each(function(key, exam) {
          if (exam.TotalECredit) {
            if ((exam.AvgEScore != null) && exam.AvgEScore < 60) {
              return tbody1.push("<td class=\"my-fail\" my-data=\"" + exam.ExamID + "\" colspan=\"2\">" + (Number(exam.AvgEScore).toFixed(_places)) + "</td>");
            } else {
              return tbody1.push("<td my-data=\"" + exam.ExamID + "\" colspan=\"2\">" + (Number(exam.AvgEScore).toFixed(_places)) + "</td>");
            }
          } else {
            return tbody1.push("<td my-data=\"" + exam.ExamID + "\" colspan=\"2\"></td>");
          }
        });
        if (_system_type === "kh") {
          if (exam_data.FixExam.TotalTFCredit) {
            if ((exam_data.FixExam.AvgTFScore != null) && exam_data.FixExam.AvgTFScore < 60) {
              tbody1.push("<td class=\"my-fail\" colspan=\"2\">" + (Number(exam_data.FixExam.AvgTFScore).toFixed(_places)) + "</td>");
            } else {
              tbody1.push("<td colspan=\"2\">" + (Number(exam_data.FixExam.AvgTFScore).toFixed(_places)) + "</td>");
            }
          } else {
            tbody1.push("<td colspan=\"2\"></td>");
          }
        }
        tbody1.push("</tr>");
        tbody_html = tbody1.join("");
        return $("#ExamScore").find("thead").html(thead_html).end().find("tbody").html(tbody_html).end().find("td[rel='tooltip']").tooltip();
      } else {
        $("#ExamScore").find("thead").html("").end().find("tbody").html("<tr><td>目前無資料</td></tr>");
        return $("#ScoreInterval tbody").html("<tr><td colspan=\"13\">目前無資料</td></tr>");
      }
    };
    switchLevel = function(score) {
      if (score >= 0 && score < 10) {
        return "Level0";
      } else if (score >= 10 && score < 20) {
        return "Level10";
      } else if (score >= 20 && score < 30) {
        return "Level20";
      } else if (score >= 30 && score < 40) {
        return "Level30";
      } else if (score >= 40 && score < 50) {
        return "Level40";
      } else if (score >= 50 && score < 60) {
        return "Level50";
      } else if (score >= 60 && score < 70) {
        return "Level60";
      } else if (score >= 70 && score < 80) {
        return "Level70";
      } else if (score >= 80 && score < 90) {
        return "Level80";
      } else if (score >= 90 && score <= 100) {
        return "Level90";
      } else {
        return "";
      }
    };
    showInterval = function(exam_data, isCurrSemester) {
      var dropdownList;
      if (_system_show_model !== "subject") {
        false;
      }
      dropdownList = [];
      if (exam_data) {
        $(exam_data.ExamList).each(function(key, exam) {
          return dropdownList.push("<li><a href=\"#\" my-examid=\"" + exam.ExamID + "\">" + exam.ExamName + "</a></li>");
        });
      }
      if (_system_type === "kh") {
        dropdownList.push("<li><a href=\"#\" my-examid=\"-999\">平時評量</a></li>");
      }
      $("#ExamDropDown").find("ul").html(dropdownList.join("")).end().find("a[data-toggle='dropdown']").html("");
      $("#ExamDropDown .dropdown-menu a").click(function() {
        $("#ScoreInterval tbody").html("<tr><td colspan=\"13\">載入中...</td></tr>");
        $("#ExamDropDown a[data-toggle='dropdown']").html($(this).text()).attr('my-examid', $(this).attr('my-examid'));
        return interval_process(exam_data, isCurrSemester);
      });
      return $("#ExamDropDown .dropdown-menu a:first").trigger("click");
    };
    interval_process = function(exam_data, isCurrSemester) {
      var curr_examid, levelList, pre_domain, tbody1, tbody_html;
      levelList = ["Level0", "Level10", "Level20", "Level30", "Level40", "Level50", "Level60", "Level70", "Level80", "Level90", "Level100"];
      tbody1 = [];
      tbody_html = "";
      pre_domain = null;
      curr_examid = $("#ExamDropDown a[data-toggle='dropdown']").attr('my-examid');
      if (exam_data) {
        $(exam_data.Course).each(function(key, course) {
          var domain, exam, my_level, td_score;
          domain = exam_data.Domain['domain:' + course.Domain];
          tbody1.push("<tr>");
          if (course.Domain !== pre_domain) {
            tbody1.push("<th rowspan=\"" + domain.CourseCount + "\">" + course.Domain + "</th>");
          }
          if (course.Domain === '彈性課程') {
            tbody1.push("<th>" + course.Subject + "</th>");
          } else {
            tbody1.push("<th>" + course.Subject + "</th>");
          }
          exam = course.Exams[curr_examid];
          td_score = null;
          my_level = '';
          if ((exam != null ? exam.Interval : void 0) != null) {
            if (exam.Avg !== '未開放') {
              if (exam.Avg) {
                my_level = switchLevel(Number(exam.Avg));
              }
              for (key in levelList) {
                if (levelList[key] === my_level) {
                  tbody1.push("<td class=\"my-fail\">" + exam.Interval[levelList[key]] + "</td>");
                } else {
                  tbody1.push("<td>" + exam.Interval[levelList[key]] + "</td>");
                }
              }
            } else {
              tbody1.push("<td colspan=\"11\">\n  " + (exam.EndTime ? exam.EndTime.toString() + "後開放" : "尚未開放") + "\n</td>");
            }
          } else if (curr_examid === "-999") {
            if (_system_type === "kh") {
              if (course.FixScore === '未開放') {
                tbody1.push("<td colspan=\"11\">\n" + (course.FixEndTime ? course.FixEndTime.toString() + "後開放" : "尚未開放") + "\n</td>");
              } else {
                if (course.FixScore) {
                  my_level = switchLevel(Number(course.FixScore));
                }
                for (key in levelList) {
                  if (levelList[key] === my_level) {
                    tbody1.push("<td class=\"my-fail\">" + course.Interval[levelList[key]] + "</td>");
                  } else {
                    tbody1.push("<td>" + course.Interval[levelList[key]] + "</td>");
                  }
                }
              }
            }
          } else {
            tbody1.push("<td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>");
          }
          tbody1.push("</tr>");
          return pre_domain = course.Domain;
        });
        tbody1.push("</tr>");
        tbody_html = tbody1.join("");
        return $("#ScoreInterval tbody").html(tbody_html);
      } else {
        return $("#ScoreInterval tbody").html("<tr><td colspan=\"13\">目前無資料</td></tr>");
      }
    };
    set_error_message = function(select_str, serviceName, error) {
      var tmp_msg;
      tmp_msg = "<i class=\"icon-white icon-info-sign my-err-info\"></i><strong>呼叫服務失敗或網路異常，請稍候重試!</strong>(" + serviceName + ")";
      if (error !== null) {
        if (error.dsaError) {
          if (error.dsaError.status === "504") {
            switch (error.dsaError.message) {
              case "501":
                tmp_msg = "<strong>很抱歉，您無讀取資料權限！</strong>";
            }
          } else {
            if (error.dsaError.message) {
              tmp_msg = error.dsaError.message;
            }
          }
        } else if (error.loginError.message) {
          tmp_msg = error.loginError.message;
        } else {
          if (error.message) {
            tmp_msg = error.message;
          }
        }
        $(select_str).html("<div class=\"alert alert-error\"><button class=\"close\" data-dismiss=\"alert\">×</button>" + tmp_msg + "</div>");
        return $(".my-err-info").click(function() {
          return alert("請拍下此圖，並與客服人員連絡，謝謝您。\n" + JSON.stringify(error, null, 2));
        });
      }
    };
    FloatMath = function(x, operators, y) {
      var arg1, arg2, e, m, r1, r2;
      x = Number(x);
      y = Number(y);
      arg1 = x + '';
      arg2 = y + '';
      try {
        r1 = arg1.split(".")[1].length;
      } catch (_error) {
        e = _error;
        r1 = 0;
      }
      try {
        r2 = arg2.split(".")[1].length;
      } catch (_error) {
        e = _error;
        r2 = 0;
      }
      m = Math.max(r1, r2);
      switch (operators) {
        case "+":
          return (FloatMath(x, '*', Math.pow(10, m)) + FloatMath(y, '*', Math.pow(10, m))) / Math.pow(10, m);
        case "-":
          return (FloatMath(x, '*', Math.pow(10, m)) - FloatMath(y, '*', Math.pow(10, m))) / Math.pow(10, m);
        case "*":
          m = r1 + r2;
          return (Number(arg1.replace(".", "")) * Number(arg2.replace(".", ""))) / Math.pow(10, m);
        case "/":
          return FloatMath(x, '*', Math.pow(10, m)) / FloatMath(y, '*', Math.pow(10, m));
        default:
          return '';
      }
    };
    FloatFormat = function(arg1, type, places) {
      places = places || 0;
      switch (type) {
        case "ceil":
          return FloatMath(Math.ceil(FloatMath(arg1, '*', Math.pow(10, places))), '/', Math.pow(10, places));
        case "floor":
          return FloatMath(Math.floor(FloatMath(arg1, '*', Math.pow(10, places))), '/', Math.pow(10, places));
        case "round":
          return FloatMath(Math.round(FloatMath(arg1, '*', Math.pow(10, places))), '/', Math.pow(10, places));
        default:
          return arg1;
      }
    };
    Comparer = function(s1, s2) {
      var ComparerWithKeys;
      ComparerWithKeys = function(s1, s2) {
        var b1, b2, i, index, key, maxLength;
        if (s1 === s2) {
          return 0;
        }
        if (s1.length === 0) {
          return 1;
        }
        if (s2.length === 0) {
          return -1;
        }
        maxLength = (s1.length > s2.length ? s2.length : s1.length);
        i = 0;
        while (i < maxLength) {
          for (index in _keys) {
            b1 = false;
            b2 = false;
            key = _keys[index];
            b1 = (s1.indexOf(key) === 0 ? true : false);
            b2 = (s2.indexOf(key) === 0 ? true : false);
            if (b1 && !b2) {
              return -1;
            }
            if (b2 && !b1) {
              return 1;
            }
          }
          if (s1.substring(0, 1) === s2.substring(0, 1)) {
            s1 = s1.substring(1, s1.length);
            s2 = s2.substring(1, s2.length);
          } else {
            return (s1.substring(0, 1) < s2.substring(0, 1) ? -1 : 1);
          }
          i++;
        }
        if (s1 === s2) {
          return 0;
        }
        if (!s1) {
          return -1;
        }
        if (!s2) {
          return 1;
        }
        return ComparerWithKeys(s1, s2);
      };
      return ComparerWithKeys(s1.Index, s2.Index);
    };
    myHandleArray = function(obj) {
      var result;
      result = void 0;
      if (!$.isArray(obj)) {
        result = [];
        if (obj) {
          result.push(obj);
        }
      } else {
        result = obj;
      }
      return result;
    };
    getCurrSemester();
    return {
      'score': function(schoolYear, semester) {
        return loadScore(schoolYear, semester);
      },
      'setModel': function(model) {
        _system_show_model = model;
        loadScore(_schoolYear, _semester);
        if (_system_show_model === "subject") {
          return $('#ExamDropDown, #ScoreInterval').removeClass('hidden');
        } else {
          return $('#ExamDropDown, #ScoreInterval').addClass('hidden');
        }
      },
      'onChangeStudent': function(index) {
        resetData();
        _student = _students[index];
        return getStudentRuleSeme();
      },
      'removeInterval': function() {
        if (_system_type === "kh") {
          return $('#ExamDropDown, #ScoreInterval').remove();
        }
      }
    };
  })();

}).call(this);
