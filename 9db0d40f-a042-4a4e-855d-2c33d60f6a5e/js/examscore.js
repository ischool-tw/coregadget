// Generated by CoffeeScript 1.6.2
(function() {
  var Exam;

  jQuery(function() {
    $("#ExamScore tbody").html("<tr><td>載入中...</td></tr>");
    $("input:radio[name='show_model'][value='" + (gadget.params.system_show_model || "subject") + "']").prop('checked', true);
    $("#children-list").on("click", "a", function(evnet) {
      $('#children-list li[class=active]').removeClass('active');
      $(this).parent().addClass('active');
      Exam.onChangeStudent($(this).attr("children-index"));
      return $('.tooltip').remove();
    });
    $("#Semester").on("click", ".btn", function(event) {
      var schoolYear, semester;

      schoolYear = $(this).attr("school-year");
      semester = $(this).attr("semester");
      $(".tooltip").remove();
      $("#ExamScore").find('thead').html('').end().find('tbody').html("<tr><td>載入中...</td></tr>");
      return Exam.score(schoolYear, semester);
    });
    return $("body").on("click", "input:radio[name='show_model']", function() {
      return Exam.setModel($(this).val());
    });
  });

  Exam = (function() {
    var Comparer, FloatAdd, FloatDiv, FloatMath, FloatMul, getCurrSemester, getStudentInfo, getStudentRuleSeme, loadScore, myHandleArray, resetData, set_error_message, showScore, _connection, _curr_schoolyear, _curr_semester, _exam_score, _keys, _math_type, _places, _schoolYear, _semester, _student, _students, _system_exam_must_enddate, _system_fix_must_enddate, _system_position, _system_show_model, _system_type;

    _system_type = gadget.params.system_type || "kh";
    _system_exam_must_enddate = gadget.params.system_exam_must_enddate || "true";
    _system_fix_must_enddate = gadget.params.system_fix_must_enddate || "true";
    _system_show_model = gadget.params.system_show_model || "subject";
    _system_position = gadget.params.system_position || "student";
    _students = null;
    _student = null;
    _curr_schoolyear = null;
    _curr_semester = null;
    _exam_score = {};
    _places = null;
    _math_type = null;
    _keys = ["國文", "國語", "英文", "英語", "數學", "理化", "生物", "社會", "物理", "化學", "歷史", "地理", "公民"];
    _schoolYear = null;
    _semester = null;
    _connection = null;
    if (_system_position === "parent") {
      _connection = gadget.getContract("ischool.exam.parent");
    } else {
      _connection = gadget.getContract("ischool.exam.student");
    }
    getCurrSemester = function() {
      return _connection.send({
        service: "_.GetCurrentSemester",
        body: {},
        result: function(response, error, http) {
          if (error !== null) {
            return set_error_message("#mainMsg", "GetCurrentSemester", error);
          } else {
            if (response.Current) {
              _curr_schoolyear = response.Current.SchoolYear || "";
              return _curr_semester = response.Current.Semester || "";
            }
          }
        }
      });
    };
    getStudentInfo = function() {
      return _connection.send({
        service: "_.GetStudentInfo",
        body: {},
        result: function(response, error, http) {
          var items;

          if (error !== null) {
            return set_error_message('#mainMsg', 'GetStudentInfo', error);
          } else {
            items = [];
            if (response.Result && response.Result.Student) {
              _students = $(response.Result.Student);
              return _students.each(function(index, student) {
                items.push("<li " + (index === 0 ? 'class="active"' : void 0) + ">\n  <a href=\"#\" children-index=\"" + index + "\">" + student.StudentName + "</a>\n</li>");
                return $("#children-list").html(items.join("")).find('a:first').trigger('click');
              });
            }
          }
        }
      });
    };
    getStudentRuleSeme = function() {
      var request;

      request = {};
      if (_system_position === "parent") {
        request.Request = {
          Condition: {
            StudentID: _student.StudentID
          }
        };
      }
      return _connection.send({
        service: "_.GetScoreCalcRule",
        body: request,
        result: function(response, error, http) {
          var obj, _ref, _ref1, _ref2, _ref3, _ref4;

          if (error !== null) {
            return set_error_message("#mainMsg", "GetScoreCalcRule", error);
          } else {
            if ((_ref = response.ScoreCalcRule) != null ? (_ref1 = _ref.Content) != null ? (_ref2 = _ref1.ScoreCalcRule) != null ? (_ref3 = _ref2['成績計算規則']) != null ? (_ref4 = _ref3['各項成績計算位數']) != null ? _ref4['科目成績計算'] : void 0 : void 0 : void 0 : void 0 : void 0) {
              obj = response.ScoreCalcRule.Content.ScoreCalcRule["成績計算規則"]["各項成績計算位數"]["科目成績計算"];
              _places = obj["位數"] || 0;
              switch (obj["進位方式"]) {
                case "無條件進位":
                  _math_type = "ceil";
                  break;
                case "無條件捨去":
                  _math_type = "floor";
                  break;
                case "四捨五入":
                  _math_type = "round";
              }
            }
            return _connection.send({
              service: "_.GetAllCourseSemester",
              body: request,
              result: function(response, error, http) {
                var items, _ref5;

                if (error !== null) {
                  return set_error_message("#mainMsg", "GetAllCourseSemester", error);
                } else {
                  if (((_ref5 = response.Course) != null ? _ref5.Semester : void 0) != null) {
                    items = [];
                    $(response.Course.Semester).each(function(index, item) {
                      return items.push("<button class=\"btn btn-large\" school-year=\"" + this.SchoolYear + "\" semester=\"" + this.Semester + "\">\n  " + this.SchoolYear + this.Semester + "\n</button>");
                    });
                    return $("#Semester .btn-group").html(items.join("")).find(".btn:first").trigger("click");
                  } else {
                    return $("#ExamScore tbody").html("<tr><td>目前無資料</td></tr>");
                  }
                }
              }
            });
          }
        }
      });
    };
    resetData = function() {
      $("#ExamScore thead").html("");
      return $("#ExamScore tbody").html("");
    };
    loadScore = function(schoolYear, semester) {
      var isCurrSemester, request;

      _schoolYear = schoolYear;
      _semester = semester;
      isCurrSemester = schoolYear === _curr_schoolyear && semester === _curr_semester;
      if (_exam_score[schoolYear + semester]) {
        return showScore(_exam_score[schoolYear + semester], isCurrSemester);
      } else {
        request = {
          Content: {
            Condition: {
              SchoolYear: schoolYear,
              Semester: semester
            }
          }
        };
        if (_system_position === "parent") {
          request.Content.Condition.StudentID = _student.StudentID;
        }
        return _connection.send({
          service: "_.GetJHCourseExamScore",
          body: request,
          result: function(response, error, http) {
            var getIndex, oCourse, oElasticity, oScore, _ref, _ref1;

            if (error !== null) {
              return set_error_message("#mainMsg", "GetJHCourseExamScore", error);
            } else {
              if ((_ref = response.ExamScoreList) != null ? (_ref1 = _ref.Seme) != null ? _ref1.Course : void 0 : void 0) {
                oCourse = myHandleArray(response.ExamScoreList.Seme.Course).sort(Comparer);
                oScore = _exam_score[schoolYear + semester] = [];
                oElasticity = {
                  'Domain': '彈性課程',
                  'Courses': []
                };
                getIndex = function(obj, uid, key) {
                  var ret;

                  ret = -1;
                  $(obj).each(function(index, item) {
                    if (item[key] === uid) {
                      return ret = index;
                    }
                  });
                  return ret;
                };
                $(oCourse).each(function(index, course) {
                  var idx, obj, _ref2, _ref3;

                  course.Domain = (_ref2 = course.Domain) != null ? _ref2 : '彈性課程';
                  course.Subject = (_ref3 = course.Subject) != null ? _ref3 : '社團';
                  if (course.Domain === '彈性課程') {
                    return oElasticity.Courses.push(course);
                  } else {
                    idx = getIndex(oScore, course.Domain, 'Domain');
                    if (idx === -1) {
                      obj = {
                        'Domain': course.Domain,
                        'Courses': [course]
                      };
                      return oScore.push(obj);
                    } else {
                      return oScore[idx].Courses.push(course);
                    }
                  }
                });
                if (oElasticity.Courses.length > 0) {
                  oScore.push(oElasticity);
                }
              } else {
                _exam_score[schoolYear + semester] = null;
              }
              if ($("#Semester button.active").attr("school-year") === schoolYear && $("#Semester button.active").attr("semester") === semester) {
                return showScore(_exam_score[schoolYear + semester], isCurrSemester);
              }
            }
          }
        });
      }
    };
    showScore = function(exam_data, isCurrSemester) {
      var exam_list, exam_process, getIndex, getNow, now, tbody1, tbody_html, thead1, thead2, thead_html, total_domain_score, total_fixdomain_score, total_score;

      exam_list = [];
      thead1 = [];
      thead2 = [];
      thead_html = "";
      tbody1 = [];
      tbody_html = "";
      total_score = {
        'fixdomain': {
          'examTotal': 0,
          'examCount': 0,
          'weightTotal': 0,
          'weightCount': 0
        }
      };
      total_domain_score = {};
      total_fixdomain_score = {};
      now = new Date();
      getIndex = function(cid, exams) {
        var ret;

        ret = null;
        $(exams).each(function(index, item) {
          if (item.ExamID === cid) {
            return ret = item;
          }
        });
        return ret;
      };
      getNow = function(callBack) {
        return _connection.send({
          service: "_.GetNow",
          body: {},
          result: function(response, error, http) {
            if (error !== null) {
              return set_error_message("#mainMsg", "GetNow", error);
            } else {
              if (callBack && $.isFunction(callBack)) {
                return callBack(new Date(response.Now));
              }
            }
          }
        });
      };
      exam_process = function() {
        var avg_count, avg_exam_score, exam_html;

        if (exam_data) {
          $(exam_data).each(function(index, domain) {
            return $(domain.Courses).each(function(index, course) {
              return $(course.Exam).each(function(index, exam) {
                if (exam.ExamID) {
                  if ($.inArray(exam.ExamID, exam_list) === -1) {
                    exam_list.push(exam.ExamID);
                    thead1.push("<th colspan=\"2\">" + exam.ExamName + "</th>");
                    thead2.push("<th colspan=\"2\">成績</th>");
                    return total_score[exam.ExamID] = {
                      'examTotal': 0,
                      'examCount': 0,
                      'weightTotal': 0,
                      'weightCount': 0
                    };
                  }
                }
              });
            });
          });
          $(exam_data).each(function(index, domain) {
            var avg_domain_score, domain_html, pre_score;

            if (_system_show_model === "domain") {
              pre_score = -999;
            }
            $(exam_list).each(function(index, examid) {
              return total_domain_score[examid] = {
                'weightTotal': 0,
                'weightCount': 0,
                'tbody1Index': 0
              };
            });
            total_fixdomain_score = {
              'weightTotal': 0,
              'weightCount': 0,
              'tbody1Index': 0
            };
            $(domain.Courses).each(function(idx, course) {
              var fix_score, fixenddate, show_fix, _ref, _ref1;

              tbody1.push("<tr>");
              if (idx === 0) {
                tbody1.push("<th rowspan=\"" + domain.Courses.length + "\">" + domain.Domain + "</th>");
              }
              tbody1.push("<th>" + course.Subject + "</th>\n<th>" + course.Credit + "</th>");
              if (_system_show_model === "subject") {
                pre_score = -999;
              }
              $(exam_list).each(function(key, value) {
                var avg_score, endtime, exam, ext_assignmentScore, ext_score, ext_text, extension, show_data, td_score, _ref;

                endtime = null;
                show_data = true;
                exam = getIndex(value, course.Exam);
                extension = null;
                ext_score = null;
                ext_text = null;
                ext_assignmentScore = null;
                avg_score = null;
                td_score = null;
                if (exam) {
                  if (isCurrSemester) {
                    if (_system_exam_must_enddate === "true") {
                      if (((_ref = exam.ScoreDetail) != null ? _ref.EndTime : void 0) != null) {
                        endtime = new Date(exam.ScoreDetail.EndTime);
                        if (endtime >= now) {
                          show_data = false;
                        }
                      }
                    }
                  }
                  if (exam.ScoreDetail && exam.ScoreDetail.Extension && show_data) {
                    extension = exam.ScoreDetail.Extension.Extension;
                    switch (_system_type) {
                      case "kh":
                        ext_score = extension.Score || "";
                        avg_score = parseInt(ext_score, 10);
                        td_score = ext_score ? Number(avg_score).toFixed(_places) : "";
                        break;
                      case "hs":
                        ext_score = extension.Score || "";
                        ext_assignmentScore = extension.AssignmentScore || "";
                        if (ext_score && ext_assignmentScore) {
                          avg_score = FloatMath(FloatDiv(FloatAdd(ext_score, ext_assignmentScore), 2), _math_type, _places);
                          td_score = "<span class=\"my-avg-score\"> " + (Number(avg_score).toFixed(_places)) + " </span>\n( " + ext_score + " / " + ext_assignmentScore + " )";
                        } else if (ext_score) {
                          avg_score = parseInt(ext_score, 10);
                          td_score = (ext_score ? Number(avg_score).toFixed(_places) : "");
                        } else {
                          avg_score = parseInt(ext_assignmentScore, 10);
                          td_score = (ext_assignmentScore ? Number(avg_score).toFixed(_places) : "");
                        }
                    }
                    if (avg_score != null) {
                      total_score[exam.ExamID]['examTotal'] = FloatAdd(total_score[exam.ExamID]['examTotal'], avg_score);
                      total_score[exam.ExamID]['examCount'] += 1;
                      total_score[exam.ExamID]['weightTotal'] = FloatAdd(total_score[exam.ExamID]['weightTotal'], FloatMul(avg_score, course.Credit));
                      total_score[exam.ExamID]['weightCount'] += parseInt(course.Credit || 0, 10);
                      total_domain_score[exam.ExamID]['weightTotal'] = FloatAdd(total_domain_score[exam.ExamID]['weightTotal'], FloatMul(avg_score, course.Credit));
                      total_domain_score[exam.ExamID]['weightCount'] += parseInt(course.Credit || 0, 10);
                    }
                  }
                  if (_system_show_model === "domain" && idx === 0) {
                    total_domain_score[exam.ExamID]['tbody1Index'] = tbody1.length;
                    tbody1.push("<td rowspan=\"" + domain.Courses.length + "\"></td><td rowspan=\"" + domain.Courses.length + "\"></td>");
                  }
                  if (_system_show_model === "subject") {
                    if (show_data === true) {
                      if (td_score) {
                        if (avg_score && avg_score < 60) {
                          tbody1.push("<td class=\"my-fail\" my-data=\"" + exam.ExamID + "\">" + td_score + "</td>");
                        } else {
                          tbody1.push("<td my-data=\"" + exam.ExamID + "\">" + td_score + "</td>");
                        }
                        if (course.Subject === "體育" || pre_score === -999) {
                          tbody1.push("<td>&nbsp;</td>");
                        } else {
                          if (avg_score > pre_score) {
                            tbody1.push("<td><span class=\"my-progress\">↑</span></td>");
                          } else if (avg_score < pre_score) {
                            tbody1.push("<td><span class=\"my-regress\">↓</span></td>");
                          } else {
                            tbody1.push("<td>&nbsp;</td>");
                          }
                        }
                        return pre_score = avg_score;
                      } else {
                        return tbody1.push("<td></td><td></td>");
                      }
                    } else if (show_data === false) {
                      return tbody1.push("<td colspan=\"2\" rel=\"tooltip\"\n  title=\"" + (exam.ScoreDetail.EndTime ? exam.ScoreDetail.EndTime + "後開放" : "尚未開放") + "\">\n  未開放</td>");
                    } else {
                      return tbody1.push("<td></td><td></td>");
                    }
                  }
                } else {
                  if (_system_show_model === "domain" && idx === 0) {
                    return tbody1.push("<td rowspan=\"" + domain.Courses.length + "\"></td><td rowspan=\"" + domain.Courses.length + "\"></td>");
                  } else if (_system_show_model === "subject") {
                    return tbody1.push("<td></td><td></td>");
                  }
                }
              });
              if (_system_type === "kh") {
                fixenddate = null;
                show_fix = true;
                fix_score = null;
                if (isCurrSemester) {
                  if (_system_fix_must_enddate === "true") {
                    if (course.FixTime && course.FixTime.Extension && course.FixTime.Extension.OrdinarilyEndTime) {
                      fixenddate = new Date(course.FixTime.Extension.OrdinarilyEndTime);
                      if (fixenddate >= now) {
                        show_fix = false;
                      }
                    }
                  }
                }
                if (show_fix === true) {
                  if ((_ref = course.FixExtension) != null ? (_ref1 = _ref.Extension) != null ? _ref1.OrdinarilyScore : void 0 : void 0) {
                    fix_score = course.FixExtension.Extension.OrdinarilyScore;
                  }
                  if (_system_show_model === "domain") {
                    if (fix_score) {
                      total_fixdomain_score['weightTotal'] = FloatAdd(total_fixdomain_score['weightTotal'], FloatMul(fix_score, course.Credit));
                      total_fixdomain_score['weightCount'] += parseInt(course.Credit || 0, 10);
                      total_score['fixdomain']['weightTotal'] += total_fixdomain_score['weightTotal'];
                      total_score['fixdomain']['weightCount'] += total_fixdomain_score['weightCount'];
                    }
                    if (idx === 0) {
                      total_fixdomain_score['tbody1Index'] = tbody1.length;
                      tbody1.push("<td rowspan=\"" + domain.Courses.length + "\" my-data=\"Ordinarily\"></td>");
                    }
                  } else if (_system_show_model === "subject") {
                    if (fix_score) {
                      total_score['fixdomain']['examTotal'] = FloatAdd(total_score['fixdomain']['examTotal'], fix_score);
                      total_score['fixdomain']['examCount'] += 1;
                      if (parseInt(fix_score, 10) < 60) {
                        tbody1.push("<td class=\"my-fail\" my-data=\"Ordinarily\">" + (Number(fix_score).toFixed(_places)) + "</td>");
                      } else {
                        tbody1.push("<td my-data=\"Ordinarily\">" + (Number(fix_score).toFixed(_places)) + "</td>");
                      }
                    } else {
                      tbody1.push("<td></td>");
                    }
                  }
                } else if (show_fix === false) {
                  if (_system_show_model === "domain" && idx === 0) {
                    tbody1.push("<td rowspan=\"" + domain.Courses.length + "\" my-data=\"Ordinarily\" rel=\"tooltip\"\n  title=\"" + (fixenddate ? fixenddate + "後開放" : "尚未開放") + "\">\n  未開放</td>");
                  } else if (_system_show_model === "subject") {
                    tbody1.push("<td my-data=\"Ordinarily\" rel=\"tooltip\"\ntitle=\"" + (fixenddate ? fixenddate + "後開放" : "尚未開放") + "\">\n未開放</td>");
                  }
                }
              }
              return tbody1.push("</tr>");
            });
            if (_system_show_model === "domain") {
              $(exam_list).each(function(index, examid) {
                var avg_domain_score, domain_html;

                domain_html = "";
                avg_domain_score = total_domain_score[examid]['weightCount'] != null ? FloatMath(FloatDiv(total_domain_score[examid]['weightTotal'], total_domain_score[examid]['weightCount']), _math_type, _places) : null;
                if (total_domain_score[examid]['weightCount']) {
                  if (avg_domain_score && avg_domain_score < 60) {
                    domain_html += "<td class=\"my-fail\" my-data=\"" + examid + "\" rowspan=\"" + domain.Courses.length + "\">" + (Number(avg_domain_score).toFixed(_places)) + "</td>";
                  } else {
                    domain_html += "<td my-data=\"" + examid + "\" rowspan=\"" + domain.Courses.length + "\">" + (Number(avg_domain_score).toFixed(_places)) + "</td>";
                  }
                  if (pre_score === -999) {
                    domain_html += "<td rowspan=\"" + domain.Courses.length + "\">&nbsp;</td>";
                  } else {
                    if (avg_domain_score > pre_score) {
                      domain_html += "<td rowspan=\"" + domain.Courses.length + "\"><span class=\"my-progress\">↑</span></td>";
                    } else if (avg_domain_score < pre_score) {
                      domain_html += "<td rowspan=\"" + domain.Courses.length + "\"><span class=\"my-regress\">↓</span></td>";
                    } else {
                      domain_html += "<td rowspan=\"" + domain.Courses.length + "\">&nbsp;</td>";
                    }
                  }
                } else {
                  domain_html += "<td my-data=\"" + examid + "\" rowspan=\"" + domain.Courses.length + "\">&nbsp;</td>";
                  domain_html += "<td rowspan=\"" + domain.Courses.length + "\">&nbsp;</td>";
                }
                if (total_domain_score[examid]['tbody1Index'] !== 0) {
                  tbody1[total_domain_score[examid]['tbody1Index']] = domain_html;
                }
                return pre_score = avg_domain_score;
              });
              if (_system_type === "kh") {
                domain_html = "";
                avg_domain_score = total_fixdomain_score['weightCount'] != null ? FloatMath(FloatDiv(total_fixdomain_score['weightTotal'], total_fixdomain_score['weightCount']), _math_type, _places) : null;
                if (total_fixdomain_score['weightCount']) {
                  if (avg_domain_score && avg_domain_score < 60) {
                    domain_html += "<td class=\"my-fail\" my-data=\"Ordinarily\" rowspan=\"" + domain.Courses.length + "\">" + (Number(avg_domain_score).toFixed(_places)) + "</td>";
                  } else {
                    domain_html += "<td my-data=\"Ordinarily\" rowspan=\"" + domain.Courses.length + "\">" + (Number(avg_domain_score).toFixed(_places)) + "</td>";
                  }
                } else {
                  domain_html += "<td my-data=\"Ordinarily\" rowspan=\"" + domain.Courses.length + "\"></td>";
                }
                if (total_fixdomain_score['tbody1Index'] !== 0) {
                  return tbody1[total_fixdomain_score['tbody1Index']] = domain_html;
                }
              }
            }
          });
          if (_system_show_model === "subject") {
            tbody1.push("<tr><th colspan=\"3\">平均</th>");
          } else if (_system_show_model === "domain") {
            tbody1.push("<tr><th colspan=\"3\">加權平均</th>");
          }
          $(exam_list).each(function(index, examid) {
            var avg_count, avg_exam_score, exam_html;

            exam_html = "";
            avg_exam_score = "";
            avg_count = 0;
            if (_system_show_model === "subject") {
              avg_count = total_score[examid]['examCount'] || 0;
              avg_exam_score = total_score[examid]['examCount'] ? FloatMath(FloatDiv(total_score[examid]['examTotal'], total_score[examid]['examCount']), _math_type, _places) : 0;
            } else if (_system_show_model === "domain") {
              avg_count = total_score[examid]['weightCount'] || 0;
              avg_exam_score = total_score[examid]['weightCount'] ? FloatMath(FloatDiv(total_score[examid]['weightTotal'], total_score[examid]['weightCount']), _math_type, _places) : 0;
            }
            if (avg_count) {
              if (avg_exam_score && avg_exam_score < 60) {
                exam_html += "<td class=\"my-fail\" my-data=\"" + examid + "\" colspan=\"2\">" + (Number(avg_exam_score).toFixed(_places)) + "</td>";
              } else {
                exam_html += "<td my-data=\"" + examid + "\" colspan=\"2\">" + (Number(avg_exam_score).toFixed(_places)) + "</td>";
              }
            } else {
              exam_html += "<td my-data=\"" + examid + "\" colspan=\"2\"></td>";
            }
            return tbody1.push("" + exam_html);
          });
          if (_system_type === "kh") {
            exam_html = "";
            avg_exam_score = "";
            avg_count = 0;
            if (_system_show_model === "subject") {
              avg_count = total_score['fixdomain']['examCount'] || 0;
              avg_exam_score = total_score['fixdomain']['examCount'] ? FloatMath(FloatDiv(total_score['fixdomain']['examTotal'], total_score['fixdomain']['examCount']), _math_type, _places) : 0;
            } else if (_system_show_model === "domain") {
              avg_count = total_score['fixdomain']['weightCount'] || 0;
              avg_exam_score = total_score['fixdomain']['weightCount'] ? FloatMath(FloatDiv(total_score['fixdomain']['weightTotal'], total_score['fixdomain']['weightCount']), _math_type, _places) : 0;
            }
            if (avg_count) {
              if (avg_exam_score && avg_exam_score < 60) {
                exam_html += "<td class=\"my-fail\" my-data=\"" + examid + "\" colspan=\"2\"" + (Number(avg_exam_score).toFixed(_places)) + "</td>";
              } else {
                exam_html += "<td colspan=\"2\">" + (Number(avg_exam_score).toFixed(_places)) + "</td>";
              }
            } else {
              exam_html += "<td colspan=\"2\"></td>";
            }
            tbody1.push("" + exam_html);
          }
          tbody1.push("</tr>");
          switch (_system_type) {
            case "kh":
              thead_html = "<tr class=\"my-nofill\">\n  <th rowspan=\"2\">領域名稱</th>\n  <th rowspan=\"2\">科目名稱</th>\n  <th rowspan=\"2\">權數</th>\n  " + (thead1.join("")) + "\n  <th>平時評量</th>\n</tr>\n<tr class=\"my-nofill\">" + (thead2.join("")) + "<th>成績</th></tr>";
              break;
            default:
              thead_html = "<tr class=\"my-nofill\">\n  <th rowspan=\"2\">領域名稱</th>\n  <th rowspan=\"2\">科目名稱</th>\n  <th rowspan=\"2\">權數</th>\n  " + (thead1.join("")) + "\n</tr>\n<tr class=\"my-nofill\">" + (thead2.join("")) + "</tr>";
          }
          tbody_html = tbody1.join("");
          return $("#ExamScore").find("thead").html(thead_html).end().find("tbody").html(tbody_html).end().find("td[rel='tooltip']").tooltip();
        } else {
          return $("#ExamScore").find("thead").html("").end().find("tbody").html("<tr><td>目前無資料</td></tr>");
        }
      };
      if (isCurrSemester && (_system_exam_must_enddate === "true" || _system_fix_must_enddate === "true")) {
        return getNow(function(d1) {
          now = d1;
          return exam_process();
        });
      } else {
        return exam_process();
      }
    };
    set_error_message = function(select_str, serviceName, error) {
      var tmp_msg;

      tmp_msg = "<i class=\"icon-white icon-info-sign my-err-info\"></i><strong>呼叫服務失敗或網路異常，請稍候重試!</strong>(" + serviceName + ")";
      if (error !== null) {
        if (error.dsaError) {
          if (error.dsaError.status === "504") {
            switch (error.dsaError.message) {
              case "501":
                tmp_msg = "<strong>很抱歉，您無讀取資料權限！</strong>";
            }
          } else {
            if (error.dsaError.message) {
              tmp_msg = error.dsaError.message;
            }
          }
        } else if (error.loginError.message) {
          tmp_msg = error.loginError.message;
        } else {
          if (error.message) {
            tmp_msg = error.message;
          }
        }
        $(select_str).html("<div class=\"alert alert-error\"><button class=\"close\" data-dismiss=\"alert\">×</button>" + tmp_msg + "</div>");
        return $(".my-err-info").click(function() {
          return alert("請拍下此圖，並與客服人員連絡，謝謝您。\n" + JSON.stringify(error, null, 2));
        });
      }
    };
    FloatAdd = function(arg1, arg2) {
      var e, m, r1, r2;

      r1 = null;
      r2 = null;
      m = null;
      try {
        r1 = arg1.toString().split(".")[1].length;
      } catch (_error) {
        e = _error;
        r1 = 0;
      }
      try {
        r2 = arg2.toString().split(".")[1].length;
      } catch (_error) {
        e = _error;
        r2 = 0;
      }
      m = Math.pow(10, Math.max(r1, r2));
      return (FloatMul(arg1, m) + FloatMul(arg2, m)) / m;
    };
    FloatDiv = function(arg1, arg2) {
      var r1, r2, t1, t2;

      t1 = 0;
      t2 = 0;
      r1 = null;
      r2 = null;
      try {
        t1 = arg1.toString().split(".")[1].length;
      } catch (_error) {}
      try {
        t2 = arg2.toString().split(".")[1].length;
      } catch (_error) {}
      r1 = Number(arg1.toString().replace(".", ""));
      r2 = Number(arg2.toString().replace(".", ""));
      return (r1 / r2) * Math.pow(10, t2 - t1);
    };
    FloatMul = function(arg1, arg2) {
      var m, s1, s2;

      m = 0;
      s1 = arg1.toString();
      s2 = arg2.toString();
      try {
        m += s1.split(".")[1].length;
      } catch (_error) {}
      try {
        m += s2.split(".")[1].length;
      } catch (_error) {}
      return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m);
    };
    FloatMath = function(arg1, type, places) {
      places = places || 0;
      switch (type) {
        case "ceil":
          return (Math.ceil(arg1 * Math.pow(10, places))) / Math.pow(10, places);
        case "floor":
          return (Math.floor(arg1 * Math.pow(10, places))) / Math.pow(10, places);
        case "round":
          return (Math.round(arg1 * Math.pow(10, places))) / Math.pow(10, places);
        default:
          return arg1;
      }
    };
    Comparer = function(s1, s2) {
      var ComparerWithKeys;

      ComparerWithKeys = function(s1, s2) {
        var b1, b2, i, index, key, maxLength;

        if (s1 === s2) {
          return 0;
        }
        if (s1.length === 0) {
          return -1;
        }
        if (s2.length === 0) {
          return 1;
        }
        maxLength = (s1.length > s2.length ? s2.length : s1.length);
        i = 0;
        while (i < maxLength) {
          for (index in _keys) {
            b1 = false;
            b2 = false;
            key = _keys[index];
            b1 = (s1.indexOf(key) === 0 ? true : false);
            b2 = (s2.indexOf(key) === 0 ? true : false);
            if (b1 && !b2) {
              return -1;
            }
            if (b2 && !b1) {
              return 1;
            }
          }
          if (s1.substring(0, 1) === s2.substring(0, 1)) {
            s1 = s1.substring(1, s1.length);
            s2 = s2.substring(1, s2.length);
          } else {
            return (s1.substring(0, 1) < s2.substring(0, 1) ? -1 : 1);
          }
          i++;
        }
        if (s1 === s2) {
          return 0;
        }
        if (!s1) {
          return -1;
        }
        if (!s2) {
          return 1;
        }
        return ComparerWithKeys(s1, s2);
      };
      return ComparerWithKeys(s1.Subject, s2.Subject);
    };
    myHandleArray = function(obj) {
      var result;

      result = void 0;
      if (!$.isArray(obj)) {
        result = [];
        if (obj) {
          result.push(obj);
        }
      } else {
        result = obj;
      }
      return result;
    };
    getCurrSemester();
    if (_system_position === "parent") {
      getStudentInfo();
    } else {
      getStudentRuleSeme();
    }
    return {
      'score': function(schoolYear, semester) {
        return loadScore(schoolYear, semester);
      },
      'setModel': function(model) {
        _system_show_model = model;
        return loadScore(_schoolYear, _semester);
      },
      'onChangeStudent': function(index) {
        resetData();
        _student = _students[index];
        return getStudentRuleSeme();
      }
    };
  })();

}).call(this);
