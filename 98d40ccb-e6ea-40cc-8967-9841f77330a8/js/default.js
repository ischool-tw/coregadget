// Generated by CoffeeScript 1.6.2
(function() {
  var Exam;

  jQuery(function() {
    $("#tabAnalysis tbody:eq(0)").html("<tr><td>載入中...</td></tr>");
    $("#mainButtonGroup").on("click", "a[data-toggle='tab']", function(e) {
      if (this.hash === "#tabAnalysis") {
        return $('#printButton').show();
      } else {
        return $('#printButton').hide();
      }
    });
    $('#mainButtonGroup a[data-toggle="tab"]').on("shown", function(e) {
      if (e.target.hash === "#tabChart") {
        return Exam.resetChartData();
      }
    });
    $('#printButton').click(function() {
      return Exam.toPrint($("#myTabContent"));
    });
    return $("#save-data").click(function() {
      if ($(this).hasClass("disabled")) {
        return;
      }
      $("#errorMessage").html("");
      $(this).addClass("disabled");
      return Exam.save();
    });
  });

  Exam = (function() {
    var drawChart, getAvgScore, getCurrSemester, getMyCourses, myHandleArray, myToPrint, resetData, savePerformance, setClassInterval, set_error_message, showAnalysis, showChart, _chart, _classIntervals, _connection, _courseId, _courses, _curr_schoolyear, _curr_semester, _hasChart, _isChartReady, _now, _options, _schoolYear, _semester;

    _curr_schoolyear = null;
    _curr_semester = null;
    _schoolYear = null;
    _semester = null;
    _connection = null;
    _now = null;
    _courses = [];
    _courseId = null;
    _classIntervals = {};
    _isChartReady = false;
    _hasChart = false;
    _options = {
      title: "定期成績",
      hAxis: {
        title: "分數組距"
      },
      vAxis: {
        title: "人數",
        minValue: 2,
        gridlines: {
          count: 6
        }
      },
      chartArea: {
        left: 50,
        height: "70%",
        width: "80%"
      },
      focusTarget: "category"
    };
    _chart = null;
    _connection = gadget.getContract("ischool.teaching_analysis.teacher");
    setClassInterval = function(course) {
      var levelname, range;

      range = ["0", "1 - 9", "10 - 19", "20 - 29", "30 - 39", "40 - 49", "50 - 59", "60 - 69", "70 - 79", "80 - 89", "90 - 99", "100"];
      levelname = ["Level0", "Level1", "Level10", "Level20", "Level30", "Level40", "Level50", "Level60", "Level70", "Level80", "Level90", "Level100"];
      return $(range).each(function(index, item) {
        var data;

        data = {
          'name': levelname[index],
          'range': item
        };
        course.push(data);
        return course[levelname[index]] = data;
      });
    };
    getCurrSemester = function() {
      return _connection.send({
        service: "_.GetCurrentSemester",
        body: {},
        result: function(response, error, http) {
          if (error !== null) {
            set_error_message("#mainMsg", "GetCurrentSemester", error);
          } else {
            if (response.Response) {
              _curr_schoolyear = response.Response.SchoolYear || "";
              _curr_semester = response.Response.Semester || "";
              if (_curr_semester === "0") {
                $('#currShoolYear').html(_curr_schoolyear + ' 學年度暑期');
              } else {
                $('#currShoolYear').html(_curr_schoolyear + ' 學年度第 ' + _curr_semester + ' 學期');
              }
            }
          }
          return _connection.send({
            service: "_.GetCurrentDateTime",
            body: {},
            result: function(response, error, http) {
              if (error !== null) {
                return set_error_message("#mainMsg", "GetCurrentDateTime", error);
              } else {
                _now = new Date(response.DateTime);
                return getMyCourses();
              }
            }
          });
        }
      });
    };
    getMyCourses = function() {
      return _connection.send({
        service: "_.GetMyCourses",
        body: {
          Request: {
            SchoolYear: _curr_schoolyear,
            Semester: _curr_semester
          }
        },
        result: function(response, error, http) {
          var list;

          if (error !== null) {
            return set_error_message("#mainMsg", "GetMyCourses", error);
          } else {
            if (response.Response) {
              _courses = myHandleArray(response.Response);
              list = [];
              $(response.Response.Course).each(function(index, item) {
                var classInterval, _ref;

                list.push("<option value=\"" + item.CourseID + "\">" + (item.Subject || '') + "</option>");
                if (((_ref = item.Exams) != null ? _ref.Exam : void 0) != null) {
                  $(item.Exams.Exam).each(function(index, exam) {
                    return item.Exams.Exam['exam_' + exam.ExamID] = exam;
                  });
                }
                item.HasSource = false;
                _courses['course_' + item.CourseID] = item;
                classInterval = _classIntervals['course_' + item.CourseID] = [];
                return setClassInterval(classInterval);
              });
              $('#curr_course_list').html(list.join(','));
              $("#curr_course_list").change(function(e) {
                return getAvgScore(this.value);
              });
              return $("#curr_course_list option:first").trigger('change');
            } else {
              return $("#tabAnalysis tbody:eq(0)").html("<tr><td>目前無資料</td></tr>");
            }
          }
        }
      });
    };
    resetData = function() {
      $("#tabAnalysis thead").html("");
      $("#tabAnalysis tbody").html("");
      return $("#tabChart form").html("");
    };
    getAvgScore = function(courseId) {
      resetData();
      _courseId = courseId;
      if (_courses['course_' + courseId].HasSource) {
        showAnalysis(_courses['course_' + courseId]);
        return showChart(_courses['course_' + courseId]);
      } else {
        return _connection.send({
          service: "_.GetAvgScore",
          body: {
            Request: {
              CourseID: courseId
            }
          },
          result: function(response, error, http) {
            var classInterval, course, _ref;

            if (error !== null) {
              return set_error_message("#mainMsg", "GetAvgScore", error);
            } else {
              course = _courses['course_' + courseId];
              course.HasSource = true;
              classInterval = _classIntervals['course_' + courseId];
              if (((_ref = response.Response) != null ? _ref.Exam : void 0) != null) {
                $(response.Response.Exam).each(function(index, score) {
                  var _ref1, _ref2;

                  if (((_ref1 = course.Exams) != null ? (_ref2 = _ref1.Exam) != null ? _ref2['exam_' + score.ExamID] : void 0 : void 0) != null) {
                    course.Exams.Exam['exam_' + score.ExamID].AvgScore = score.AvgScore;
                  }
                  return $(classInterval).each(function(index, item) {
                    return item['exam_' + score.ExamID] = score[item.name] ? parseInt(score[item.name], 10) : null;
                  });
                });
              }
              if ($('#curr_course_list').val() === courseId) {
                showAnalysis(course);
                return showChart(course);
              }
            }
          }
        });
      }
    };
    showAnalysis = function(course) {
      var buttons, classInterval, tbody0, tbody1, tbody2, thead0, thead2, _ref;

      if ((course != null ? (_ref = course.Exams) != null ? _ref.Exam : void 0 : void 0) != null) {
        thead0 = [];
        thead2 = [];
        tbody0 = [];
        tbody1 = [];
        tbody2 = [];
        classInterval = _classIntervals['course_' + _courseId];
        $(course.Exams.Exam).each(function(index, exam) {
          var Enddate, Startdate;

          thead0.push("<th>" + exam.ExamName + "</th>");
          if (exam.InputStartTime && exam.InputEndTime) {
            Startdate = new Date(exam.InputStartTime);
            Enddate = new Date(exam.InputEndTime);
            if (Startdate <= _now && Enddate >= _now) {
              thead2.push("<th>\n  <a href=\"#myModal\" class=\"btn\" data-toggle=\"modal\" data-courseId=\"" + course.CourseID + "\" data-examId=\"" + exam.ExamID + "\"\n    rel=\"tooltip\" title=\"開放期間：<br />" + exam.InputStartTime + "<br />~<br />" + exam.InputEndTime + "\">\n    <i class=\"icon-edit\"></i>" + exam.ExamName + "\n  </a>\n</th>");
            } else {
              thead2.push("<th>" + exam.ExamName + "</th>");
            }
          } else {
            thead2.push("<th>" + exam.ExamName + "</th>");
          }
          tbody0.push("<th>" + (exam.AvgScore || '') + "</th>");
          return tbody2.push("<td><div class=\"my-performance\">" + ($.htmlEncode(exam.Performance).replace(/\n/g, '<br />') || '') + "</div></td>");
        });
        $(classInterval).each(function(index, item) {
          tbody1.push("<tr><th>" + item.range + "</th>");
          $(course.Exams.Exam).each(function(index, exam) {
            return tbody1.push("<td>" + (item['exam_' + exam.ExamID] || '0') + "</td>");
          });
          return tbody1.push("</tr>");
        });
        $('#tabAnalysis table thead:eq(0)').html("<tr><th>平均分數</th>" + (thead0.join('')) + "</tr>");
        $('#tabAnalysis table thead:eq(1)').html("<tr><th>人數統計</th>" + (thead0.join('')) + "</tr>");
        $('#tabAnalysis table thead:eq(2)').html("<tr><th>評量</th>" + (thead2.join('')) + "</tr>");
        $('#tabAnalysis table tbody:eq(0)').html("<tr><th>平均</th>" + (tbody0.join('')) + "</tr>");
        $('#tabAnalysis table tbody:eq(1)').html(tbody1.join(''));
        $('#tabAnalysis table tbody:eq(2)').html("<tr><th>表現記錄</th>" + (tbody2.join('')) + "</tr>");
        buttons = $('#tabAnalysis table thead:eq(2) a[rel="tooltip"]');
        buttons.tooltip();
        return buttons.on("click", function(e) {
          var courseId, examId, performance;

          courseId = $(this).attr("data-courseId");
          examId = $(this).attr("data-examId");
          performance = _courses['course_' + courseId].Exams.Exam['exam_' + examId].Performance || '';
          return $('#myModal').find('h3').html("評量表現記錄 - " + ($(this).text() || '')).end().find('textarea').val("" + performance).end().find('#errorMessage').html('').end().find("#save-data").attr("data-courseId", courseId).attr("data-examId", examId);
        });
      } else {
        return $('#tabAnalysis table tbody:eq(0)').html("<tr><td>目前無資料</td></tr>");
      }
    };
    showChart = function(course) {
      var checkbox_list, _ref;

      checkbox_list = [];
      if ((course != null ? (_ref = course.Exams) != null ? _ref.Exam : void 0 : void 0) != null) {
        $(course.Exams.Exam).each(function(index, exam) {
          return checkbox_list.push("<label class=\"checkbox\">\n  <input type=\"checkbox\" name=\"checkExam\" value=\"" + exam.ExamID + "\" checked>\n  " + exam.ExamName + "\n</label>");
        });
      }
      $('#tabChart form').html(checkbox_list.join(""));
      $('#tabChart form input:checkbox').click(function() {
        return Exam.resetChartData();
      });
      return drawChart();
    };
    drawChart = function() {
      var classInterval, course, data, dt, fields, ii, items;

      if (_isChartReady === true) {
        course = _courses['course_' + _courseId];
        classInterval = _classIntervals['course_' + _courseId];
        if (_hasChart === true) {
          _chart.clearChart();
        }
        data = [];
        fields = $("#tabChart form :input").serializeArray();
        if (fields.length > 0) {
          ii = -1;
          while (ii < classInterval.length) {
            items = [];
            if (ii === -1) {
              items = ["人數"];
              $.each(fields, function(i, field) {
                return items.push(course.Exams.Exam['exam_' + field.value].ExamName || '');
              });
            } else {
              items.push(classInterval[ii].range);
              $.each(fields, function(i, field) {
                return items.push(classInterval[ii]['exam_' + field.value] || 0);
              });
            }
            data.push(items);
            ii++;
          }
          dt = google.visualization.arrayToDataTable(data);
          _chart.draw(dt, _options);
          return _hasChart = true;
        }
      }
    };
    savePerformance = function() {
      var courseId, examId, performance;

      courseId = $("#save-data").attr("data-courseId");
      examId = $("#save-data").attr("data-examId");
      performance = $('#myModal textarea').val() || "";
      return _connection.send({
        service: "_.SetExam_Ext",
        body: {
          Request: {
            Exam: {
              Performance: $('#myModal textarea').val(),
              CourseID: courseId,
              ExamID: examId
            }
          }
        },
        result: function(response, error, http) {
          if (error !== null) {
            $('#save-data').attr("action-type", "save").removeClass("disabled");
            return set_error_message("#errorMessage", "SetExam_Ext", error);
          } else {
            _courses['course_' + courseId].Exams.Exam['exam_' + examId].Performance = performance;
            showAnalysis(_courses['course_' + courseId]);
            $('#save-data').attr("action-type", "save").removeClass("disabled");
            $('body').scrollTop(0);
            $('#myModal').modal('hide');
            $('#mainMsg').html('<div class="alert alert-success">\n  儲存成功！\n</div>');
            return setTimeout("$('#mainMsg').html('')", 1500);
          }
        }
      });
    };
    set_error_message = function(select_str, serviceName, error) {
      var tmp_msg;

      tmp_msg = "<i class=\"icon-white icon-info-sign my-err-info\"></i><strong>呼叫服務失敗或網路異常，請稍候重試!</strong>(" + serviceName + ")";
      if (error !== null) {
        if (error.dsaError) {
          if (error.dsaError.status === "504") {
            switch (error.dsaError.message) {
              case "501":
                tmp_msg = "<strong>很抱歉，您無讀取資料權限！</strong>";
                break;
              case "502":
                tmp_msg = "<strong>很抱歉，目前非開放期間！</strong>";
            }
          } else {
            if (error.dsaError.message) {
              tmp_msg = error.dsaError.message;
            }
          }
        } else if (error.loginError.message) {
          tmp_msg = error.loginError.message;
        } else {
          if (error.message) {
            tmp_msg = error.message;
          }
        }
        $(select_str).html("<div class=\"alert alert-error\"><button class=\"close\" data-dismiss=\"alert\">×</button>" + tmp_msg + "</div>");
        return $(".my-err-info").click(function() {
          return alert("請拍下此圖，並與客服人員連絡，謝謝您。\n" + JSON.stringify(error, null, 2));
        });
      }
    };
    myHandleArray = function(obj) {
      var result;

      result = void 0;
      if (!$.isArray(obj)) {
        result = [];
        if (obj) {
          result.push(obj);
        }
      } else {
        result = obj;
      }
      return result;
    };
    $.htmlEncode = function(value) {
      return $('<div/>').text(value).html();
    };
    myToPrint = function(jEle) {
      var content, doc;

      content = $("<div>").append(jEle.html());
      content.find("table").removeClass().addClass("table").end().find("i").remove().end().find("a").each(function() {
        $(this).after('<span>' + $(this).html() + '</span>');
        return $(this).remove();
      });
      content = content.html();
      content = "<!DOCTYPE html>\n<html>\n  <head>\n    <title>教學分析</title>\n    <link href=\"css/bootstrap.css\" rel=\"stylesheet\" />\n    <link href=\"css/bootstrap-responsive.css\" rel=\"stylesheet\" />\n    <link href=\"css/mybootstrap.css\" rel=\"stylesheet\" />\n    <link href=\"css/base.css\" rel=\"stylesheet\" />\n    <link href=\"css/default.css\" rel=\"stylesheet\" />\n  </head>\n  <body style=\"width:880px;height:auto;padding:40px 20px\" onload=\"window.print();\">\n  <div style=\"width:880px;\" class=\"my-print-page\">\n    <h3>" + ($('#currShoolYear').html()) + "  " + ($("#curr_course_list option:selected").text()) + " 教學分析</h3>\n    " + content + "\n  </div>\n  </body>\n</html>";
      doc = window.open("about:blank", "_blank", "");
      doc.document.open();
      doc.document.write(content);
      doc.document.close();
      return doc.focus();
    };
    getCurrSemester();
    return {
      toPrint: function(jEle) {
        return myToPrint(jEle);
      },
      resetChartData: function() {
        return drawChart();
      },
      drawVisualization: function() {
        _chart = new google.visualization.ColumnChart(document.getElementById("chart_div"));
        _isChartReady = true;
        return drawChart();
      },
      save: function() {
        return savePerformance();
      }
    };
  })();

  google.load("visualization", "1", {
    packages: ["corechart"]
  });

  google.setOnLoadCallback(Exam.drawVisualization);

}).call(this);
